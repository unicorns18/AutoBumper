{"version":3,"file":"number.js","sourceRoot":"","sources":["../../../../common/src/number.ts"],"names":[],"mappings":";;;AAAA,4BAEC;AAED,8BAEC;AAED,8BAEC;AAED,wBAEC;AAGD,4BAGC;AAGD,8BAEC;AAGD,4BAGC;AAGD,8BAEC;AApCD,SAAgB,QAAQ,CAAC,CAAS,EAAE,CAAS;IAC3C,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACxB,CAAC;AAED,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AAC1B,CAAC;AAED,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,OAAO,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC;AACvD,CAAC;AAED,SAAgB,MAAM,CAAC,CAAS;IAC9B,OAAO,CAAC,GAAG,QAAQ,CAAC;AACtB,CAAC;AAED,kBAAkB;AAClB,SAAgB,QAAQ,CAAC,CAAS,EAAE,CAAS;IAC3C,MAAM,OAAO,GAAG,MAAM,CAAC;IACvB,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,CAAC;AAED,mBAAmB;AACnB,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,OAAO,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC;AAED,kBAAkB;AAClB,SAAgB,QAAQ,CAAC,CAAS,EAAE,CAAS;IAC3C,MAAM,OAAO,GAAG,UAAU,CAAC;IAC3B,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,CAAC;AAED,mBAAmB;AACnB,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,OAAO,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC;AAEM,MAAM,GAAG,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC;AAAnD,QAAA,GAAG,OAAgD","sourcesContent":["export function uint8Add(a: number, b: number) {\n  return (a + b) & 0xff;\n}\n\nexport function uint16Add(a: number, b: number) {\n  return (a + b) & 0xffff;\n}\n\nexport function uint32Add(a: number, b: number) {\n  return Number((BigInt(a) + BigInt(b)) & 0xffffffffn);\n}\n\nexport function uint24(v: number) {\n  return v & 0xffffff;\n}\n\n/**Return a > b */\nexport function uint16Gt(a: number, b: number) {\n  const halfMod = 0x8000;\n  return (a < b && b - a > halfMod) || (a > b && a - b < halfMod);\n}\n\n/**Return a >= b */\nexport function uint16Gte(a: number, b: number) {\n  return a === b || uint16Gt(a, b);\n}\n\n/**Return a > b */\nexport function uint32Gt(a: number, b: number) {\n  const halfMod = 0x80000000;\n  return (a < b && b - a > halfMod) || (a > b && a - b < halfMod);\n}\n\n/**Return a >= b */\nexport function uint32Gte(a: number, b: number) {\n  return a === b || uint32Gt(a, b);\n}\n\nexport const int = (n: number) => Number.parseInt(n as any, 10);\n"]}