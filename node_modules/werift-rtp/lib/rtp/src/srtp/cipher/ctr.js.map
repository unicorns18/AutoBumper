{"version":3,"file":"ctr.js","sourceRoot":"","sources":["../../../../../src/srtp/cipher/ctr.ts"],"names":[],"mappings":"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","sourcesContent":["import { createCipheriv, createDecipheriv, createHmac } from \"crypto\";\n\nimport { CipherAesBase } from \".\";\nimport { RtcpHeader } from \"../../rtcp/header\";\nimport { RtpHeader } from \"../../rtp/rtp\";\n\nexport class CipherAesCtr extends CipherAesBase {\n  readonly authTagLength = 10;\n\n  constructor(\n    srtpSessionKey: Buffer,\n    srtpSessionSalt: Buffer,\n    srtcpSessionKey: Buffer,\n    srtcpSessionSalt: Buffer,\n    private srtpSessionAuthTag: Buffer,\n    private srtcpSessionAuthTag: Buffer,\n  ) {\n    super(srtpSessionKey, srtpSessionSalt, srtcpSessionKey, srtcpSessionSalt);\n  }\n\n  encryptRtp(header: RtpHeader, payload: Buffer, rolloverCounter: number) {\n    const headerBuffer = header.serialize(header.serializeSize);\n\n    const counter = this.generateCounter(\n      header.sequenceNumber,\n      rolloverCounter,\n      header.ssrc,\n      this.srtpSessionSalt,\n    );\n\n    const cipher = createCipheriv(\"aes-128-ctr\", this.srtpSessionKey, counter);\n    const enc = cipher.update(payload);\n\n    const authTag = this.generateSrtpAuthTag(\n      rolloverCounter,\n      headerBuffer,\n      enc,\n    );\n    return Buffer.concat([headerBuffer, enc, authTag]);\n  }\n\n  decryptRtp(cipherText: Buffer, rolloverCounter: number): [Buffer, RtpHeader] {\n    const header = RtpHeader.deSerialize(cipherText);\n\n    const size = cipherText.length - this.authTagLength;\n\n    cipherText = cipherText.subarray(0, cipherText.length - this.authTagLength);\n\n    const counter = this.generateCounter(\n      header.sequenceNumber,\n      rolloverCounter,\n      header.ssrc,\n      this.srtpSessionSalt,\n    );\n    const cipher = createDecipheriv(\n      \"aes-128-ctr\",\n      this.srtpSessionKey,\n      counter,\n    );\n    const payload = cipherText.subarray(header.payloadOffset);\n    const buf = cipher.update(payload);\n\n    const dst = Buffer.concat([\n      cipherText.subarray(0, header.payloadOffset),\n      buf,\n      Buffer.alloc(size - header.payloadOffset - buf.length),\n    ]);\n\n    return [dst, header];\n  }\n\n  encryptRTCP(rtcpPacket: Buffer, srtcpIndex: number): Buffer {\n    let out = Buffer.from(rtcpPacket);\n    const ssrc = out.readUInt32BE(4);\n\n    const counter = this.generateCounter(\n      srtcpIndex & 0xffff,\n      srtcpIndex >> 16,\n      ssrc,\n      this.srtcpSessionSalt,\n    );\n    const cipher = createCipheriv(\"aes-128-ctr\", this.srtcpSessionKey, counter);\n    // Encrypt everything after header\n    const buf = cipher.update(out.slice(8));\n    buf.copy(out, 8);\n    out = Buffer.concat([out, Buffer.alloc(4)]);\n    out.writeUInt32BE(srtcpIndex, out.length - 4);\n    out[out.length - 4] |= 0x80;\n    const authTag = this.generateSrtcpAuthTag(out);\n    out = Buffer.concat([out, authTag]);\n\n    return out;\n  }\n\n  decryptRTCP(encrypted: Buffer): [Buffer, RtcpHeader] {\n    const header = RtcpHeader.deSerialize(encrypted);\n\n    const tailOffset = encrypted.length - (this.authTagLength + srtcpIndexSize);\n    const out = Buffer.from(encrypted).slice(0, tailOffset);\n\n    const isEncrypted = encrypted[tailOffset] >> 7;\n    if (isEncrypted === 0) return [out, header];\n\n    let srtcpIndex = encrypted.readUInt32BE(tailOffset);\n    srtcpIndex &= ~(1 << 31);\n\n    const ssrc = encrypted.readUInt32BE(4);\n\n    // todo impl compare\n    const actualTag = encrypted.subarray(encrypted.length - 10);\n\n    const counter = this.generateCounter(\n      srtcpIndex & 0xffff,\n      srtcpIndex >> 16,\n      ssrc,\n      this.srtcpSessionSalt,\n    );\n    const cipher = createDecipheriv(\n      \"aes-128-ctr\",\n      this.srtcpSessionKey,\n      counter,\n    );\n    const buf = cipher.update(out.subarray(8));\n    buf.copy(out, 8);\n    return [out, header];\n  }\n\n  generateSrtcpAuthTag(buf: Buffer) {\n    const srtcpSessionAuth = createHmac(\"sha1\", this.srtcpSessionAuthTag);\n    return srtcpSessionAuth.update(buf).digest().slice(0, 10);\n  }\n\n  generateCounter(\n    sequenceNumber: number,\n    rolloverCounter: number,\n    ssrc: number,\n    sessionSalt: Buffer,\n  ) {\n    const counter = Buffer.alloc(16);\n    counter.writeUInt32BE(ssrc, 4);\n    counter.writeUInt32BE(rolloverCounter, 8);\n    counter.writeUInt32BE(Number(BigInt(sequenceNumber) << 16n), 12);\n\n    for (let i = 0; i < sessionSalt.length; i++) {\n      counter[i] ^= sessionSalt[i];\n    }\n    return counter;\n  }\n\n  generateSrtpAuthTag(roc: number, ...buffers: Buffer[]) {\n    const srtpSessionAuth = createHmac(\"sha1\", this.srtpSessionAuthTag);\n    const rocRaw = Buffer.alloc(4);\n    rocRaw.writeUInt32BE(roc);\n\n    for (const buf of buffers) {\n      srtpSessionAuth.update(buf);\n    }\n    return srtpSessionAuth.update(rocRaw).digest().subarray(0, 10);\n  }\n}\n\nconst srtcpIndexSize = 4;\n"]}