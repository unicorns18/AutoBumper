{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/srtp/cipher/index.ts"],"names":[],"mappings":";;;AAGA,MAAsB,aAAa;IACjC,YACS,cAAsB,EACtB,eAAuB,EACvB,eAAuB,EACvB,gBAAwB;QAH/B;;;;mBAAO,cAAc;WAAQ;QAC7B;;;;mBAAO,eAAe;WAAQ;QAC9B;;;;mBAAO,eAAe;WAAQ;QAC9B;;;;mBAAO,gBAAgB;WAAQ;IAC9B,CAAC;IAEJ,UAAU,CACR,MAAiB,EACjB,OAAe,EACf,eAAuB;QAEvB,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC;IAED,UAAU,CAAC,UAAkB,EAAE,eAAuB;QACpD,OAAO,EAAS,CAAC;IACnB,CAAC;IAED,WAAW,CAAC,OAAe,EAAE,UAAkB;QAC7C,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC;IAED,WAAW,CAAC,SAAiB;QAC3B,OAAO,EAAS,CAAC;IACnB,CAAC;CACF;AA3BD,sCA2BC","sourcesContent":["import type { RtcpHeader } from \"../../rtcp/header\";\nimport type { RtpHeader } from \"../../rtp/rtp\";\n\nexport abstract class CipherAesBase {\n  constructor(\n    public srtpSessionKey: Buffer,\n    public srtpSessionSalt: Buffer,\n    public srtcpSessionKey: Buffer,\n    public srtcpSessionSalt: Buffer,\n  ) {}\n\n  encryptRtp(\n    header: RtpHeader,\n    payload: Buffer,\n    rolloverCounter: number,\n  ): Buffer {\n    return Buffer.from([]);\n  }\n\n  decryptRtp(cipherText: Buffer, rolloverCounter: number): [Buffer, RtpHeader] {\n    return [] as any;\n  }\n\n  encryptRTCP(rawRtcp: Buffer, srtcpIndex: number): Buffer {\n    return Buffer.from([]);\n  }\n\n  decryptRTCP(encrypted: Buffer): [Buffer, RtcpHeader] {\n    return [] as any;\n  }\n}\n"]}