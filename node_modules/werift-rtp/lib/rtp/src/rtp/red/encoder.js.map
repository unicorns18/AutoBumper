{"version":3,"file":"encoder.js","sourceRoot":"","sources":["../../../../../src/rtp/red/encoder.ts"],"names":[],"mappings":";;;AAAA,gDAAmD;AACnD,qCAA+B;AAE/B,MAAa,UAAU;IAIrB,YAAmB,WAAW,CAAC;QAAnB;;;;mBAAO,QAAQ;WAAI;QAHvB;;;;mBAAiE,EAAE;WAAC;QAC5E;;;;mBAAY,EAAE;WAAC;IAEmB,CAAC;IAEnC,IAAI,CAAC,OAA8D;QACjE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACvC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAED,KAAK;QACH,MAAM,GAAG,GAAG,IAAI,YAAG,EAAE,CAAC;QACtB,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;QAEjE,MAAM,cAAc,GAAG,iBAAiB,CAAC,GAAG,EAAE,CAAC;QAC/C,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,OAAO,GAAG,CAAC;QACb,CAAC;QAED,iBAAiB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YACtC,MAAM,eAAe,GAAG,IAAA,eAAS,EAC/B,cAAc,CAAC,SAAS,EACxB,CAAC,SAAS,CAAC,SAAS,CACrB,CAAC;YACF,IAAI,eAAe,GAAG,SAAS,EAAE,CAAC;gBAChC,OAAO;YACT,CAAC;YACD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,SAAS,CAAC,KAAK;gBACtB,OAAO,EAAE,SAAS,CAAC,OAAO;gBAC1B,eAAe;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;YACd,KAAK,EAAE,cAAc,CAAC,KAAK;YAC3B,OAAO,EAAE,cAAc,CAAC,OAAO;SAChC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA1CD,gCA0CC;AAED,MAAM,SAAS,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC","sourcesContent":["import { uint32Add } from \"../../../../common/src\";\nimport { Red } from \"./packet\";\n\nexport class RedEncoder {\n  private cache: { block: Buffer; timestamp: number; blockPT: number }[] = [];\n  cacheSize = 10;\n\n  constructor(public distance = 1) {}\n\n  push(payload: { block: Buffer; timestamp: number; blockPT: number }) {\n    this.cache.push(payload);\n    if (this.cache.length > this.cacheSize) {\n      this.cache.shift();\n    }\n  }\n\n  build() {\n    const red = new Red();\n    const redundantPayloads = this.cache.slice(-(this.distance + 1));\n\n    const presentPayload = redundantPayloads.pop();\n    if (!presentPayload) {\n      return red;\n    }\n\n    redundantPayloads.forEach((redundant) => {\n      const timestampOffset = uint32Add(\n        presentPayload.timestamp,\n        -redundant.timestamp,\n      );\n      if (timestampOffset > Max14Uint) {\n        return;\n      }\n      red.blocks.push({\n        block: redundant.block,\n        blockPT: redundant.blockPT,\n        timestampOffset,\n      });\n    });\n    red.blocks.push({\n      block: presentPayload.block,\n      blockPT: presentPayload.blockPT,\n    });\n    return red;\n  }\n}\n\nconst Max14Uint = (0x01 << 14) - 1;\n"]}