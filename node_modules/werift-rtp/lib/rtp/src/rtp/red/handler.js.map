{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../../../src/rtp/red/handler.ts"],"names":[],"mappings":";;;AAAA,6BAA6E;AAE7E,iEAAiE;AACjE,mEAAmE;AACnE,oEAAoE;AACpE,oEAAoE;AACpE,oEAAoE;AAEpE,kBAAkB;AAClB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AAEpB,MAAa,UAAU;IAAvB;QACmB;;;;mBAAO,GAAG;WAAC;QACpB;;;;mBAA4B,EAAE;WAAC;IAsDzC,CAAC;IApDC,IAAI,CAAC,GAAQ,EAAE,IAAe;QAC5B,MAAM,OAAO,GAAgB,EAAE,CAAC;QAEhC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE;YAC5D,MAAM,cAAc,GAAG,IAAA,aAAS,EAC9B,IAAI,CAAC,MAAM,CAAC,cAAc,EAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAC/B,CAAC;YACF,IAAI,eAAe,EAAE,CAAC;gBACpB,OAAO,CAAC,IAAI,CACV,IAAI,aAAS,CACX,IAAI,aAAS,CAAC;oBACZ,SAAS,EAAE,IAAA,aAAS,EAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC;oBAC7D,WAAW,EAAE,OAAO;oBACpB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;oBACtB,cAAc;oBACd,MAAM,EAAE,IAAI;iBACb,CAAC,EACF,KAAK,CACN,CACF,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,IAAI,CACV,IAAI,aAAS,CACX,IAAI,aAAS,CAAC;oBACZ,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;oBAChC,WAAW,EAAE,OAAO;oBACpB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;oBACtB,cAAc;oBACd,MAAM,EAAE,IAAI;iBACb,CAAC,EACF,KAAK,CACN,CACF,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;YACpC,YAAY;YACZ,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC;gBAC3D,OAAO,KAAK,CAAC;YACf,CAAC;iBAAM,CAAC;gBACN,kBAAkB;gBAClB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC5C,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;gBAC/B,CAAC;gBACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBACnD,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAxDD,gCAwDC","sourcesContent":["import { type Red, RtpHeader, RtpPacket, uint16Add, uint32Add } from \"../..\";\n\n// 0                   1                    2                   3\n// 0 1 2 3 4 5 6 7 8 9 0 1 2 3  4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n// |F|   block PT  |  timestamp offset         |   block length    |\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n// 0 1 2 3 4 5 6 7\n// +-+-+-+-+-+-+-+-+\n// |0|   Block PT  |\n// +-+-+-+-+-+-+-+-+\n\nexport class RedHandler {\n  private readonly size = 150;\n  private sequenceNumbers: number[] = [];\n\n  push(red: Red, base: RtpPacket) {\n    const packets: RtpPacket[] = [];\n\n    red.blocks.forEach(({ blockPT, timestampOffset, block }, i) => {\n      const sequenceNumber = uint16Add(\n        base.header.sequenceNumber,\n        -(red.blocks.length - (i + 1)),\n      );\n      if (timestampOffset) {\n        packets.push(\n          new RtpPacket(\n            new RtpHeader({\n              timestamp: uint32Add(base.header.timestamp, -timestampOffset),\n              payloadType: blockPT,\n              ssrc: base.header.ssrc,\n              sequenceNumber,\n              marker: true,\n            }),\n            block,\n          ),\n        );\n      } else {\n        packets.push(\n          new RtpPacket(\n            new RtpHeader({\n              timestamp: base.header.timestamp,\n              payloadType: blockPT,\n              ssrc: base.header.ssrc,\n              sequenceNumber,\n              marker: true,\n            }),\n            block,\n          ),\n        );\n      }\n    });\n\n    const filtered = packets.filter((p) => {\n      // duplicate\n      if (this.sequenceNumbers.includes(p.header.sequenceNumber)) {\n        return false;\n      } else {\n        // buffer overflow\n        if (this.sequenceNumbers.length > this.size) {\n          this.sequenceNumbers.shift();\n        }\n        this.sequenceNumbers.push(p.header.sequenceNumber);\n        return true;\n      }\n    });\n    return filtered;\n  }\n}\n"]}