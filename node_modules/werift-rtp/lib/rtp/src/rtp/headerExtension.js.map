{"version":3,"file":"headerExtension.js","sourceRoot":"","sources":["../../../../src/rtp/headerExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import { BitStream, bufferReader, bufferWriter } from \"../../../common/src\";\nimport type { Extension } from \"./rtp\";\n\nexport const RTP_EXTENSION_URI = {\n  sdesMid: \"urn:ietf:params:rtp-hdrext:sdes:mid\",\n  sdesRTPStreamID: \"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\",\n  repairedRtpStreamId: \"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\",\n  transportWideCC:\n    \"http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\",\n  absSendTime: \"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\",\n  dependencyDescriptor:\n    \"https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension\",\n  audioLevelIndication: \"urn:ietf:params:rtp-hdrext:ssrc-audio-level\",\n  videoOrientation: \"urn:3gpp:video-orientation\",\n} as const;\n\nexport type TransportWideCCPayload = number;\n\nexport type AudioLevelIndicationPayload = { v: boolean; level: number };\nexport interface videoOrientationPayload {\n  /**\n   Camera: indicates the direction of the camera used for this video stream. It can be used by the MTSI client in\n  receiver to e.g. display the received video differently depending on the source camera.\n  0: Front-facing camera, facing the user. If camera direction is unknown by the sending MTSI client in the terminal\n  then this is the default value used.\n  1: Back-facing camera, facing away from the user. \n */\n  c: number;\n  /**\n   F = Flip: indicates a horizontal (left-right flip) mirror operation on the video as sent on the link.\n  0: No flip operation. If the sending MTSI client in terminal does not know if a horizontal mirror operation is\n  necessary, then this is the default value used.\n  1: Horizontal flip operation \n   */\n  f: number;\n  /**\n   R1, R0 = Rotation: indicates the rotation of the video as transmitted on the link. The receiver should rotate the video to\n  compensate that rotation. E.g. a 90° Counter Clockwise rotation should be compensated by the receiver with a 90°\n  Clockwise rotation prior to displaying. \n\n    +----+----+-----------------------------------------------+------------------------------+\n  | R1 | R0 | Rotation of the video as sent on the link     | Rotation on the receiver      |\n  |    |    |                                               | before display                |\n  +----+----+-----------------------------------------------+------------------------------+\n  |  0 |  0 | 0° rotation                                   | None                         |\n  +----+----+-----------------------------------------------+------------------------------+\n  |  0 |  1 | 90° Counter Clockwise (CCW) rotation or 270°  | 90° Clockwise (CW) rotation  |\n  |    |    | Clockwise (CW) rotation                       |                              |\n  +----+----+-----------------------------------------------+------------------------------+\n  |  1 |  0 | 180° CCW rotation or 180° CW rotation         | 180° CW rotation             |\n  +----+----+-----------------------------------------------+------------------------------+\n  |  1 |  1 | 270° CCW rotation or 90° CW rotation          | 90° CCW rotation             |\n  +----+----+-----------------------------------------------+------------------------------+\n\n   */\n  r1: number;\n  r0: number;\n}\n\nexport interface Extensions {\n  [uri: string]: any;\n}\n\nexport function rtpHeaderExtensionsParser(\n  extensions: Extension[],\n  extIdUriMap: { [id: number]: string },\n): Extensions {\n  return extensions\n    .map((extension) => {\n      const uri = extIdUriMap[extension.id];\n      if (!uri) {\n        return { uri: \"unknown\", value: extension.payload };\n      }\n      switch (uri) {\n        case RTP_EXTENSION_URI.sdesMid:\n        case RTP_EXTENSION_URI.sdesRTPStreamID:\n        case RTP_EXTENSION_URI.repairedRtpStreamId:\n          return { uri, value: deserializeString(extension.payload) };\n        case RTP_EXTENSION_URI.transportWideCC:\n          return { uri, value: deserializeUint16BE(extension.payload) };\n        case RTP_EXTENSION_URI.absSendTime:\n          return {\n            uri,\n            value: deserializeAbsSendTime(extension.payload),\n          };\n        case RTP_EXTENSION_URI.audioLevelIndication: {\n          return {\n            uri,\n            value: deserializeAudioLevelIndication(extension.payload),\n          };\n        }\n        case RTP_EXTENSION_URI.videoOrientation:\n          return { uri, value: deserializeVideoOrientation(extension.payload) };\n        default:\n          return { uri, value: extension.payload };\n      }\n    })\n    .reduce((acc: { [uri: string]: any }, cur) => {\n      if (cur) acc[cur.uri] = cur.value;\n      return acc;\n    }, {});\n}\n\nexport function serializeSdesMid(id: string) {\n  return Buffer.from(id);\n}\n\nexport function serializeSdesRTPStreamID(id: string) {\n  return Buffer.from(id);\n}\n\nexport function serializeRepairedRtpStreamId(id: string) {\n  return Buffer.from(id);\n}\n\nexport function serializeTransportWideCC(transportSequenceNumber: number) {\n  return bufferWriter([2], [transportSequenceNumber]);\n}\n\nexport function serializeAbsSendTime(ntpTime: bigint) {\n  const buf = Buffer.alloc(3);\n  const time = (ntpTime >> 14n) & 0x00ffffffn;\n  buf.writeUIntBE(Number(time), 0, 3);\n  return buf;\n}\n\nexport function serializeAudioLevelIndication(level: number) {\n  const stream = new BitStream(Buffer.alloc(1));\n  stream.writeBits(1, 1);\n  stream.writeBits(7, level);\n\n  return stream.uint8Array;\n}\n\nexport function deserializeString(buf: Buffer) {\n  return buf.toString();\n}\n\nexport function deserializeUint16BE(buf: Buffer) {\n  return buf.readUInt16BE();\n}\n\nexport function deserializeAbsSendTime(buf: Buffer) {\n  return bufferReader(buf, [3])[0];\n}\n\nexport function deserializeAudioLevelIndication(buf: Buffer) {\n  const stream = new BitStream(buf);\n  const value: AudioLevelIndicationPayload = {\n    v: stream.readBits(1) === 1,\n    level: stream.readBits(7),\n  };\n  return value;\n}\n\nexport function deserializeVideoOrientation(payload: Buffer) {\n  const stream = new BitStream(payload);\n  stream.readBits(4);\n  const value: videoOrientationPayload = {\n    c: stream.readBits(1),\n    f: stream.readBits(1),\n    r1: stream.readBits(1),\n    r0: stream.readBits(1),\n  };\n  return value;\n}\n"]}