{"version":3,"file":"rtp.js","sourceRoot":"","sources":["../../../../src/rtp/rtp.ts"],"names":[],"mappings":"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","sourcesContent":["import { BitWriter, getBit } from \"../../../common/src\";\n\nexport type Extension = { id: number; payload: Buffer };\n\nexport const ExtensionProfiles = {\n  OneByte: 0xbede, // 48862\n  TwoByte: 0x1000, // 4096\n} as const;\ntype ExtensionProfile =\n  (typeof ExtensionProfiles)[keyof typeof ExtensionProfiles];\n\nconst seqNumOffset = 2;\nconst timestampOffset = 4;\nconst ssrcOffset = 8;\nconst csrcOffset = 12;\nconst csrcSize = 4;\n\n/*\n *  0                   1                   2                   3\n *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |                           timestamp                           |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |           synchronization source (SSRC) identifier            |\n * +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n * |            contributing source (CSRC) identifiers             |\n * |                             ....                              |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\nexport class RtpHeader {\n  version = 2;\n  padding = false;\n  paddingSize = 0;\n  extension = false;\n  marker = false;\n  payloadOffset = 0;\n  payloadType = 0;\n  /**16bit, 初期値はランダムである必要があります*/\n  sequenceNumber = 0;\n  /**32bit microsec (milli/1000), 初期値はランダムである必要があります*/\n  timestamp = 0;\n  ssrc = 0;\n  csrcLength = 0;\n  csrc: number[] = [];\n  extensionProfile: ExtensionProfile = ExtensionProfiles.OneByte;\n  /**deserialize only */\n  extensionLength?: number;\n  extensions: Extension[] = [];\n  constructor(props: Partial<RtpHeader> = {}) {\n    Object.assign(this, props);\n  }\n\n  static deSerialize(rawPacket: Buffer) {\n    const h = new RtpHeader();\n    let currOffset = 0;\n    const v_p_x_cc = rawPacket[currOffset++];\n    h.version = getBit(v_p_x_cc, 0, 2);\n    h.padding = getBit(v_p_x_cc, 2) > 0;\n    h.extension = getBit(v_p_x_cc, 3) > 0;\n    h.csrcLength = getBit(v_p_x_cc, 4, 4);\n    h.csrc = [...Array(h.csrcLength)].map(() => {\n      const csrc = rawPacket.readUInt32BE(currOffset);\n      currOffset += 4;\n      return csrc;\n    });\n    currOffset += csrcOffset - 1;\n\n    const m_pt = rawPacket[1];\n    h.marker = getBit(m_pt, 0) > 0;\n    h.payloadType = getBit(m_pt, 1, 7);\n\n    h.sequenceNumber = rawPacket.readUInt16BE(seqNumOffset);\n    h.timestamp = rawPacket.readUInt32BE(timestampOffset);\n    h.ssrc = rawPacket.readUInt32BE(ssrcOffset);\n\n    for (let i = 0; i < h.csrc.length; i++) {\n      const offset = csrcOffset + i * csrcSize;\n      h.csrc[i] = rawPacket.subarray(offset).readUInt32BE();\n    }\n    if (h.extension) {\n      h.extensionProfile = rawPacket\n        .subarray(currOffset)\n        .readUInt16BE() as ExtensionProfile;\n      currOffset += 2;\n      const extensionLength = rawPacket.subarray(currOffset).readUInt16BE() * 4;\n      h.extensionLength = extensionLength;\n      currOffset += 2;\n\n      switch (h.extensionProfile) {\n        // RFC 8285 RTP One Byte Header Extension\n        case ExtensionProfiles.OneByte:\n          {\n            const end = currOffset + extensionLength;\n            while (currOffset < end) {\n              if (rawPacket[currOffset] === 0x00) {\n                currOffset++;\n                continue;\n              }\n\n              const extId = rawPacket[currOffset] >> 4;\n              const len =\n                (rawPacket[currOffset] & (rawPacket[currOffset] ^ 0xf0)) + 1; // and not &^\n              currOffset++;\n              if (extId === 0xf) {\n                break;\n              }\n              const extension: Extension = {\n                id: extId,\n                payload: rawPacket.subarray(currOffset, currOffset + len),\n              };\n              h.extensions = [...h.extensions, extension];\n              currOffset += len;\n            }\n          }\n          break;\n        // RFC 8285 RTP Two Byte Header Extension\n        case ExtensionProfiles.TwoByte:\n          {\n            const end = currOffset + extensionLength;\n            while (currOffset < end) {\n              if (rawPacket[currOffset] === 0x00) {\n                currOffset++;\n                continue;\n              }\n              const extId = rawPacket[currOffset];\n              currOffset++;\n              const len = rawPacket[currOffset];\n              currOffset++;\n\n              const extension: Extension = {\n                id: extId,\n                payload: rawPacket.subarray(currOffset, currOffset + len),\n              };\n              h.extensions = [...h.extensions, extension];\n              currOffset += len;\n            }\n          }\n          break;\n        default:\n          {\n            const extension: Extension = {\n              id: 0,\n              payload: rawPacket.subarray(\n                currOffset,\n                currOffset + extensionLength,\n              ),\n            };\n            h.extensions = [...h.extensions, extension];\n            currOffset += h.extensions[0].payload.length;\n          }\n          break;\n      }\n    }\n    h.payloadOffset = currOffset;\n    if (h.padding) {\n      h.paddingSize = rawPacket[rawPacket.length - 1];\n    }\n\n    return h;\n  }\n\n  get serializeSize() {\n    const { csrc, extensionProfile, extensions } = this;\n\n    let size = 12 + csrc.length * csrcSize;\n\n    if (extensions.length > 0 || this.extension === true) {\n      let extSize = 4;\n      switch (extensionProfile) {\n        case ExtensionProfiles.OneByte:\n          for (const extension of extensions) {\n            extSize += 1 + extension.payload.length;\n          }\n          break;\n        case ExtensionProfiles.TwoByte:\n          for (const extension of extensions) {\n            extSize += 2 + extension.payload.length;\n          }\n          break;\n        default:\n          extSize += extensions[0].payload.length;\n      }\n      size += Math.floor((extSize + 3) / 4) * 4;\n    }\n\n    return size;\n  }\n\n  serialize(size: number) {\n    const buf = Buffer.alloc(size);\n    let offset = 0;\n\n    const v_p_x_cc = new BitWriter(8);\n    v_p_x_cc.set(2, 0, this.version);\n    if (this.padding) v_p_x_cc.set(1, 2, 1);\n    if (this.extensions.length > 0) this.extension = true;\n    if (this.extension) v_p_x_cc.set(1, 3, 1);\n    v_p_x_cc.set(4, 4, this.csrc.length);\n    buf.writeUInt8(v_p_x_cc.value, offset++);\n\n    const m_pt = new BitWriter(8);\n    if (this.marker) m_pt.set(1, 0, 1);\n    m_pt.set(7, 1, this.payloadType);\n    buf.writeUInt8(m_pt.value, offset++);\n\n    buf.writeUInt16BE(this.sequenceNumber, seqNumOffset);\n    offset += 2;\n    buf.writeUInt32BE(this.timestamp, timestampOffset);\n    offset += 4;\n    buf.writeUInt32BE(this.ssrc, ssrcOffset);\n    offset += 4;\n\n    for (const csrc of this.csrc) {\n      buf.writeUInt32BE(csrc, offset);\n      offset += 4;\n    }\n\n    if (this.extension) {\n      const extHeaderPos = offset;\n      buf.writeUInt16BE(this.extensionProfile, offset);\n      offset += 4;\n      const startExtensionsPos = offset;\n\n      switch (this.extensionProfile) {\n        case ExtensionProfiles.OneByte:\n          for (const extension of this.extensions) {\n            buf.writeUInt8(\n              (extension.id << 4) | (extension.payload.length - 1),\n              offset++,\n            );\n            extension.payload.copy(buf, offset);\n            offset += extension.payload.length;\n          }\n          break;\n        case ExtensionProfiles.TwoByte: // 1バイトで収まらなくなった歴史的経緯\n          for (const extension of this.extensions) {\n            buf.writeUInt8(extension.id, offset++);\n            buf.writeUInt8(extension.payload.length, offset++);\n            extension.payload.copy(buf, offset);\n            offset += extension.payload.length;\n          }\n          break;\n        default: {\n          const extLen = this.extensions[0].payload.length;\n          if (extLen % 4 != 0) {\n            throw new Error();\n          }\n          this.extensions[0].payload.copy(buf, offset);\n          offset += extLen;\n        }\n      }\n\n      const extSize = offset - startExtensionsPos;\n      const roundedExtSize = Math.trunc((extSize + 3) / 4) * 4;\n\n      buf.writeUInt16BE(Math.trunc(roundedExtSize / 4), extHeaderPos + 2);\n      // padding 4 bytes boundaries\n      for (let i = 0; i < roundedExtSize - extSize; i++) {\n        buf.writeUInt8(0, offset);\n        offset++;\n      }\n    }\n    this.payloadOffset = offset;\n    return buf;\n  }\n}\n\nexport class RtpPacket {\n  constructor(\n    public header: RtpHeader,\n    public payload: Buffer,\n  ) {}\n\n  get serializeSize() {\n    return this.header.serializeSize + this.payload.length;\n  }\n\n  clone() {\n    return new RtpPacket(new RtpHeader({ ...this.header }), this.payload);\n  }\n\n  serialize() {\n    let buf = this.header.serialize(\n      this.header.serializeSize + this.payload.length,\n    );\n    const { payloadOffset } = this.header;\n    this.payload.copy(buf, payloadOffset);\n    if (this.header.padding) {\n      const padding = Buffer.alloc(this.header.paddingSize);\n      padding.writeUInt8(this.header.paddingSize, this.header.paddingSize - 1);\n      buf = Buffer.concat([buf, padding]);\n    }\n\n    return buf;\n  }\n\n  static deSerialize(buf: Buffer) {\n    const header = RtpHeader.deSerialize(buf);\n    const p = new RtpPacket(\n      header,\n      buf.subarray(header.payloadOffset, buf.length - header.paddingSize),\n    );\n    return p;\n  }\n\n  clear() {\n    this.payload = null as any;\n  }\n}\n"]}