{"version":3,"file":"typedArrayUtils.js","sourceRoot":"","sources":["../../../../../../../src/extra/container/webm/ebml/typedArrayUtils.ts"],"names":[],"mappings":"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","sourcesContent":["export const numberToByteArray = (\n  num: number,\n  byteLength: number = getNumberByteLength(num),\n): Uint8Array => {\n  let byteArray;\n  if (byteLength === 1) {\n    byteArray = new DataView(new ArrayBuffer(1));\n    byteArray.setUint8(0, num);\n  } else if (byteLength === 2) {\n    byteArray = new DataView(new ArrayBuffer(2));\n    byteArray.setUint16(0, num);\n  } else if (byteLength === 3) {\n    byteArray = new DataView(new ArrayBuffer(3));\n    byteArray.setUint8(0, num >> 16);\n    byteArray.setUint16(1, num & 0xffff);\n  } else if (byteLength === 4) {\n    byteArray = new DataView(new ArrayBuffer(4));\n    byteArray.setUint32(0, num);\n  } else if (/* byteLength === 5 && */ num < 0xffffffff) {\n    // 4GB (upper limit for int32) should be enough in most cases\n    byteArray = new DataView(new ArrayBuffer(5));\n    byteArray.setUint32(1, num);\n  } else if (byteLength === 5) {\n    // Naive emulations of int64 bitwise opreators\n    byteArray = new DataView(new ArrayBuffer(5));\n    byteArray.setUint8(0, (num / 0x100000000) | 0);\n    byteArray.setUint32(1, num % 0x100000000);\n  } else if (byteLength === 6) {\n    byteArray = new DataView(new ArrayBuffer(6));\n    byteArray.setUint16(0, (num / 0x100000000) | 0);\n    byteArray.setUint32(2, num % 0x100000000);\n  } else if (byteLength === 7) {\n    byteArray = new DataView(new ArrayBuffer(7));\n    byteArray.setUint8(0, (num / 0x1000000000000) | 0);\n    byteArray.setUint16(1, (num / 0x100000000) & 0xffff);\n    byteArray.setUint32(3, num % 0x100000000);\n  } else if (byteLength === 8) {\n    byteArray = new DataView(new ArrayBuffer(8));\n    byteArray.setUint32(0, (num / 0x100000000) | 0);\n    byteArray.setUint32(4, num % 0x100000000);\n  } else {\n    throw new Error(\n      \"EBML.typedArrayUtils.numberToByteArray: byte length must be less than or equal to 8\",\n    );\n  }\n  return new Uint8Array(byteArray.buffer);\n};\n\nexport const stringToByteArray = (str: string): Uint8Array => {\n  return Uint8Array.from(Array.from(str).map((_) => _.codePointAt(0)!));\n};\n\nexport function getNumberByteLength(num: number | bigint): number {\n  if (num < 0) {\n    throw new Error(\n      \"EBML.typedArrayUtils.getNumberByteLength: negative number not implemented\",\n    );\n  } else if (num < 0x100) {\n    return 1;\n  } else if (num < 0x10000) {\n    return 2;\n  } else if (num < 0x1000000) {\n    return 3;\n  } else if (num < 0x100000000) {\n    return 4;\n  } else if (num < 0x10000000000) {\n    return 5;\n  } else if (num < 0x1000000000000) {\n    return 6;\n  } else if (num < 0x20000000000000n) {\n    return 7;\n  } else {\n    throw new Error(\n      \"EBML.typedArrayUtils.getNumberByteLength: number exceeds Number.MAX_SAFE_INTEGER\",\n    );\n  }\n}\n\nexport const int16Bit = (num: number): Uint8Array => {\n  const ab = new ArrayBuffer(2);\n  new DataView(ab).setInt16(0, num);\n  return new Uint8Array(ab);\n};\n\nexport const float32bit = (num: number): Uint8Array => {\n  const ab = new ArrayBuffer(4);\n  new DataView(ab).setFloat32(0, num);\n  return new Uint8Array(ab);\n};\n\nexport const dumpBytes = (b: ArrayBuffer): string => {\n  return Array.from(new Uint8Array(b))\n    .map((_) => `0x${_.toString(16)}`)\n    .join(\", \");\n};\n"]}