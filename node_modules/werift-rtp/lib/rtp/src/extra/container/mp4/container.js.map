{"version":3,"file":"container.js","sourceRoot":"","sources":["../../../../../../src/extra/container/mp4/container.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event } from \"../../../imports/common\";\n\nimport * as MP4 from \"./mp4box\";\n\ntype DecoderConfig = AudioDecoderConfig | VideoDecoderConfig;\ntype EncodedChunk = EncodedAudioChunk | EncodedVideoChunk;\n\nexport type DataType = \"init\" | \"delta\" | \"key\";\n\nexport interface Mp4Data {\n  type: DataType;\n  timestamp: number;\n  duration: number;\n  data: Uint8Array;\n  kind: \"audio\" | \"video\";\n}\n\nexport class Mp4Container {\n  #mp4: MP4.ISOFile;\n  #audioFrame?: EncodedAudioChunk | EncodedVideoChunk;\n  #videoFrame?: EncodedAudioChunk | EncodedVideoChunk; // 1 frame buffer\n  audioTrack?: number;\n  videoTrack?: number;\n  #audioSegment = 0;\n  #videoSegment = 0;\n  onData = new Event<[Mp4Data]>();\n\n  constructor(\n    private props: {\n      track: { audio: boolean; video: boolean };\n    },\n  ) {\n    this.#mp4 = new MP4.ISOFile();\n    this.#mp4.init();\n  }\n\n  get tracksReady() {\n    let ready = true;\n    if (this.props.track.audio && !this.audioTrack) {\n      ready = false;\n    }\n    if (this.props.track.video && !this.videoTrack) {\n      ready = false;\n    }\n    return ready;\n  }\n\n  write(\n    frame: (DecoderConfig | EncodedChunk) & {\n      track: \"video\" | \"audio\";\n    },\n  ) {\n    if (isDecoderConfig(frame)) {\n      return this.#init(frame);\n    } else {\n      return this.#enqueue(frame);\n    }\n  }\n\n  #init(\n    frame: DecoderConfig & {\n      track: \"video\" | \"audio\";\n    },\n  ) {\n    let codec = frame.codec.substring(0, 4);\n    if (codec == \"opus\") {\n      codec = \"Opus\";\n    }\n\n    const options: MP4.TrackOptions = {\n      type: codec,\n      timescale: 1_000_000,\n    };\n\n    if (isVideoConfig(frame)) {\n      options.width = frame.codedWidth;\n      options.height = frame.codedHeight;\n    } else {\n      options.channel_count = frame.numberOfChannels;\n      options.samplerate = frame.sampleRate;\n      options.hdlr = \"soun\";\n    }\n\n    if (!frame.description) throw new Error(\"missing frame description\");\n    const desc = frame.description as ArrayBufferLike;\n\n    if (codec === \"avc1\") {\n      options.avcDecoderConfigRecord = desc;\n    } else if (codec === \"hev1\") {\n      options.hevcDecoderConfigRecord = desc;\n    } else if (codec === \"Opus\") {\n      // description is an identification header: https://datatracker.ietf.org/doc/html/rfc7845#section-5.1\n      // The first 8 bytes are the magic string \"OpusHead\", followed by what we actually want.\n      const dops = new MP4.BoxParser.dOpsBox();\n\n      // Annoyingly, the header is little endian while MP4 is big endian, so we have to parse.\n      dops.parse(new MP4.Stream(desc, 8, MP4.Stream.LITTLE_ENDIAN));\n\n      options.description = dops;\n    } else {\n      throw new Error(`unsupported codec: ${codec}`);\n    }\n\n    const track = this.#mp4.addTrack(options);\n    if (track == undefined) {\n      throw new Error(\"failed to initialize MP4 track\");\n    }\n    if (frame.track === \"audio\") {\n      this.audioTrack = track;\n    } else {\n      this.videoTrack = track;\n    }\n\n    if (!this.tracksReady) {\n      return;\n    }\n\n    const buffer = MP4.ISOFile.writeInitializationSegment(\n      this.#mp4.ftyp!,\n      this.#mp4.moov!,\n      0,\n      0,\n    );\n    const data = new Uint8Array(buffer);\n    const res = {\n      type: \"init\",\n      timestamp: 0,\n      duration: 0,\n      data,\n      kind: frame.track,\n    } as const;\n    this.onData.execute(res);\n  }\n\n  frameBuffer: (EncodedChunk & {\n    track: \"video\" | \"audio\";\n  })[] = [];\n\n  #enqueue(\n    frame: EncodedChunk & {\n      track: \"video\" | \"audio\";\n    },\n  ) {\n    this.frameBuffer.push(frame);\n    if (!this.tracksReady) {\n      return;\n    }\n    for (const frame of this.frameBuffer) {\n      this._enqueue(frame);\n    }\n    this.frameBuffer = [];\n  }\n\n  private _enqueue(\n    frame: EncodedChunk & {\n      track: \"video\" | \"audio\";\n    },\n  ) {\n    const track = frame.track === \"audio\" ? this.audioTrack : this.videoTrack;\n    if (!track) {\n      throw new Error(\"track missing\");\n    }\n\n    // Check if we should create a new segment\n    if (frame.track === \"video\") {\n      if (frame.type == \"key\") {\n        this.#videoSegment += 1;\n      } else if (this.#videoSegment == 0) {\n        throw new Error(\"must start with keyframe\");\n      }\n    } else {\n      this.#audioSegment += 1;\n    }\n\n    // We need a one frame buffer to compute the duration\n    if (frame.track === \"video\") {\n      if (!this.#videoFrame) {\n        this.#videoFrame = frame;\n        return;\n      }\n    } else {\n      if (!this.#audioFrame) {\n        this.#audioFrame = frame;\n        return;\n      }\n    }\n\n    const bufferFrame =\n      frame.track === \"video\" ? this.#videoFrame : this.#audioFrame;\n\n    if (!bufferFrame) {\n      throw new Error(\"bufferFrame missing\");\n    }\n\n    const duration = frame.timestamp - bufferFrame.timestamp;\n\n    // TODO avoid this extra copy by writing to the mdat directly\n    // ...which means changing mp4box.js to take an offset instead of ArrayBuffer\n    const buffer = new Uint8Array(bufferFrame.byteLength);\n    bufferFrame.copyTo(buffer);\n\n    // Add the sample to the container\n    this.#mp4.addSample(track, buffer, {\n      duration,\n      dts: bufferFrame.timestamp,\n      cts: bufferFrame.timestamp,\n      is_sync: bufferFrame.type == \"key\",\n    });\n\n    const stream = new MP4.Stream(undefined, 0, MP4.Stream.BIG_ENDIAN);\n\n    // Moof and mdat atoms are written in pairs.\n    // TODO remove the moof/mdat from the Box to reclaim memory once everything works\n    for (;;) {\n      const moof = this.#mp4.moofs.shift();\n      const mdat = this.#mp4.mdats.shift();\n\n      if (!moof && !mdat) break;\n      if (!moof) throw new Error(\"moof missing\");\n      if (!mdat) throw new Error(\"mdat missing\");\n\n      moof.write(stream);\n      mdat.write(stream);\n    }\n\n    // TODO avoid this extra copy by writing to the buffer provided in copyTo\n    const data = new Uint8Array(stream.buffer);\n\n    if (frame.track === \"video\") {\n      this.#videoFrame = frame;\n    } else {\n      this.#audioFrame = frame;\n    }\n\n    const res = {\n      type: bufferFrame.type,\n      timestamp: bufferFrame.timestamp,\n      kind: frame.track,\n      duration,\n      data,\n    };\n    this.onData.execute(res);\n  }\n\n  /* TODO flush the last frame\n\t#flush(controller: TransformStreamDefaultController<Chunk>) {\n\t\tif (this.#frame) {\n\t\t\t// TODO guess the duration\n\t\t\tthis.#enqueue(this.#frame, 0, controller)\n\t\t}\n\t}\n\t*/\n}\n\nfunction isDecoderConfig(\n  frame: DecoderConfig | EncodedChunk,\n): frame is DecoderConfig {\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  return (frame as DecoderConfig).codec !== undefined;\n}\n\nfunction isVideoConfig(frame: DecoderConfig): frame is VideoDecoderConfig {\n  return (frame as VideoDecoderConfig).codedWidth !== undefined;\n}\n\nexport interface AudioDecoderConfig {\n  codec: string;\n  description?: ArrayBuffer | undefined;\n  numberOfChannels: number;\n  sampleRate: number;\n}\n\nexport interface VideoDecoderConfig {\n  codec: string;\n  codedHeight?: number | undefined;\n  codedWidth?: number | undefined;\n  description?: ArrayBuffer | undefined;\n  displayAspectHeight?: number | undefined;\n  displayAspectWidth?: number | undefined;\n  optimizeForLatency?: boolean | undefined;\n}\n\ninterface EncodedAudioChunk {\n  readonly byteLength: number;\n  readonly duration: number | null;\n  readonly timestamp: number;\n  readonly type: EncodedAudioChunkType;\n  copyTo(destination: ArrayBuffer): void;\n}\n\ntype EncodedAudioChunkType = \"delta\" | \"key\";\n\ninterface EncodedVideoChunk {\n  readonly byteLength: number;\n  readonly duration: number | null;\n  readonly timestamp: number;\n  readonly type: EncodedVideoChunkType;\n  copyTo(destination: ArrayBuffer): void;\n}\n\ntype EncodedVideoChunkType = \"delta\" | \"key\";\n\nexport const mp4SupportedCodecs = [\"avc1\", \"opus\"] as const;\nexport type Mp4SupportedCodec = (typeof mp4SupportedCodecs)[number];\n"]}