{"version":3,"file":"exp-golomb.js","sourceRoot":"","sources":["../../../../../../src/extra/container/mp4/exp-golomb.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Exponential-Golomb buffer decoder\nclass ExpGolomb {\n  TAG = \"ExpGolomb\";\n  _buffer: Uint8Array;\n  _buffer_index = 0;\n  _total_bytes: number;\n  _total_bits: number;\n  _current_word = 0;\n  _current_word_bits_left = 0;\n\n  constructor(private uint8array: Uint8Array) {\n    this._buffer = uint8array;\n    this._total_bytes = uint8array.byteLength;\n    this._total_bits = uint8array.byteLength * 8;\n  }\n\n  destroy() {\n    this._buffer = null as any;\n  }\n\n  _fillCurrentWord() {\n    const buffer_bytes_left = this._total_bytes - this._buffer_index;\n    if (buffer_bytes_left <= 0)\n      throw new Error(\"ExpGolomb: _fillCurrentWord() but no bytes available\");\n\n    const bytes_read = Math.min(4, buffer_bytes_left);\n    const word = new Uint8Array(4);\n    word.set(\n      this._buffer.subarray(\n        this._buffer_index,\n        this._buffer_index + bytes_read,\n      ),\n    );\n    this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n    this._buffer_index += bytes_read;\n    this._current_word_bits_left = bytes_read * 8;\n  }\n\n  readBits(bits) {\n    if (bits > 32)\n      throw new Error(\"ExpGolomb: readBits() bits exceeded max 32bits!\");\n\n    if (bits <= this._current_word_bits_left) {\n      const result = this._current_word >>> (32 - bits);\n      this._current_word <<= bits;\n      this._current_word_bits_left -= bits;\n      return result;\n    }\n\n    let result = this._current_word_bits_left ? this._current_word : 0;\n    result = result >>> (32 - this._current_word_bits_left);\n    const bits_need_left = bits - this._current_word_bits_left;\n\n    this._fillCurrentWord();\n    const bits_read_next = Math.min(\n      bits_need_left,\n      this._current_word_bits_left,\n    );\n\n    const result2 = this._current_word >>> (32 - bits_read_next);\n    this._current_word <<= bits_read_next;\n    this._current_word_bits_left -= bits_read_next;\n\n    result = (result << bits_read_next) | result2;\n    return result;\n  }\n\n  readBool() {\n    return this.readBits(1) === 1;\n  }\n\n  readByte() {\n    return this.readBits(8);\n  }\n\n  _skipLeadingZero() {\n    let zero_count;\n    for (\n      zero_count = 0;\n      zero_count < this._current_word_bits_left;\n      zero_count++\n    ) {\n      if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {\n        this._current_word <<= zero_count;\n        this._current_word_bits_left -= zero_count;\n        return zero_count;\n      }\n    }\n    this._fillCurrentWord();\n    return zero_count + this._skipLeadingZero();\n  }\n\n  readUEG() {\n    // unsigned exponential golomb\n    const leading_zeros = this._skipLeadingZero();\n    return this.readBits(leading_zeros + 1) - 1;\n  }\n\n  readSEG() {\n    // signed exponential golomb\n    const value = this.readUEG();\n    if (value & 0x01) {\n      return (value + 1) >>> 1;\n    } else {\n      return -1 * (value >>> 1);\n    }\n  }\n}\n\nexport default ExpGolomb;\n"]}