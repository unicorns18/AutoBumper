{"version":3,"file":"h264.js","sourceRoot":"","sources":["../../../../../../src/extra/container/mp4/h264.ts"],"names":[],"mappings":"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","sourcesContent":["import SPSParser from \"./sps-parser\";\n\nexport enum H264NaluType {\n  kUnspecified = 0,\n  kSliceNonIDR = 1,\n  kSliceDPA = 2,\n  kSliceDPB = 3,\n  kSliceDPC = 4,\n  kSliceIDR = 5,\n  kSliceSEI = 6,\n  kSliceSPS = 7,\n  kSlicePPS = 8,\n  kSliceAUD = 9,\n  kEndOfSequence = 10,\n  kEndOfStream = 11,\n  kFiller = 12,\n  kSPSExt = 13,\n  kReserved0 = 14,\n}\n\nexport class H264NaluPayload {\n  type!: H264NaluType;\n  data!: Uint8Array;\n}\n\nexport class H264NaluAVC1 {\n  type: H264NaluType;\n  data: Uint8Array;\n\n  constructor(nalu: H264NaluPayload) {\n    const nalu_size = nalu.data.byteLength;\n\n    this.type = nalu.type;\n    this.data = new Uint8Array(4 + nalu_size); // 4 byte length-header + nalu payload\n\n    const v = new DataView(this.data.buffer);\n    // Fill 4 byte length-header\n    v.setUint32(0, nalu_size);\n    // Copy payload\n    this.data.set(nalu.data, 4);\n  }\n}\n\nexport class H264AnnexBParser {\n  private readonly TAG: string = \"H264AnnexBParser\";\n\n  private data_: Uint8Array;\n  private current_startcode_offset_: number = 0;\n  private eof_flag_: boolean = false;\n\n  public constructor(data: Uint8Array) {\n    this.data_ = data;\n    this.current_startcode_offset_ = this.findNextStartCodeOffset(0);\n  }\n\n  private findNextStartCodeOffset(start_offset: number) {\n    let i = start_offset;\n    const data = this.data_;\n\n    for (;;) {\n      if (i + 3 >= data.byteLength) {\n        this.eof_flag_ = true;\n        return data.byteLength;\n      }\n\n      // search 00 00 00 01 or 00 00 01\n      const uint32 =\n        (data[i + 0] << 24) |\n        (data[i + 1] << 16) |\n        (data[i + 2] << 8) |\n        data[i + 3];\n      const uint24 = (data[i + 0] << 16) | (data[i + 1] << 8) | data[i + 2];\n      if (uint32 === 0x00000001 || uint24 === 0x000001) {\n        return i;\n      } else {\n        i++;\n      }\n    }\n  }\n\n  public readNextNaluPayload(): H264NaluPayload | null {\n    const data = this.data_;\n    let nalu_payload: H264NaluPayload | null = null;\n\n    while (nalu_payload == null) {\n      if (this.eof_flag_) {\n        break;\n      }\n      // offset pointed to start code\n      const startcode_offset = this.current_startcode_offset_;\n\n      // nalu payload start offset\n      let offset = startcode_offset;\n      const u32 =\n        (data[offset] << 24) |\n        (data[offset + 1] << 16) |\n        (data[offset + 2] << 8) |\n        data[offset + 3];\n      if (u32 === 0x00000001) {\n        offset += 4;\n      } else {\n        offset += 3;\n      }\n\n      const nalu_type: H264NaluType = data[offset] & 0x1f;\n      const forbidden_bit = (data[offset] & 0x80) >>> 7;\n\n      const next_startcode_offset = this.findNextStartCodeOffset(offset);\n      this.current_startcode_offset_ = next_startcode_offset;\n\n      if (nalu_type >= H264NaluType.kReserved0) {\n        continue;\n      }\n      if (forbidden_bit !== 0) {\n        // Log.e(this.TAG, `forbidden_bit near offset ${offset} should be 0 but has value ${forbidden_bit}`);\n        continue;\n      }\n\n      const payload_data = data.subarray(offset, next_startcode_offset);\n\n      nalu_payload = new H264NaluPayload();\n      nalu_payload.type = nalu_type;\n      nalu_payload.data = payload_data;\n    }\n\n    return nalu_payload;\n  }\n}\n\nexport class AVCDecoderConfigurationRecord {\n  private data: Uint8Array;\n\n  // sps, pps: require Nalu without 4 byte length-header\n  public constructor(sps: Uint8Array, pps: Uint8Array, sps_details: any) {\n    let length = 6 + 2 + sps.byteLength + 1 + 2 + pps.byteLength;\n    let need_extra_fields = false;\n\n    if (sps[3] !== 66 && sps[3] !== 77 && sps[3] !== 88) {\n      need_extra_fields = true;\n      length += 4;\n    }\n\n    const data = (this.data = new Uint8Array(length));\n\n    data[0] = 0x01; // configurationVersion\n    data[1] = sps[1]; // AVCProfileIndication\n    data[2] = sps[2]; // profile_compatibility\n    data[3] = sps[3]; // AVCLevelIndication\n    data[4] = 0xff; // 111111 + lengthSizeMinusOne(3)\n\n    data[5] = 0xe0 | 0x01; // 111 + numOfSequenceParameterSets\n\n    const sps_length = sps.byteLength;\n    data[6] = sps_length >>> 8; // sequenceParameterSetLength\n    data[7] = sps_length & 0xff;\n\n    let offset = 8;\n    data.set(sps, 8);\n    offset += sps_length;\n\n    data[offset] = 1; // numOfPictureParameterSets\n\n    const pps_length = pps.byteLength;\n    data[offset + 1] = pps_length >>> 8; // pictureParameterSetLength\n    data[offset + 2] = pps_length & 0xff;\n\n    data.set(pps, offset + 3);\n    offset += 3 + pps_length;\n\n    if (need_extra_fields) {\n      data[offset] = 0xfc | sps_details.chroma_format_idc;\n      data[offset + 1] = 0xf8 | (sps_details.bit_depth_luma - 8);\n      data[offset + 2] = 0xf8 | (sps_details.bit_depth_chroma - 8);\n      data[offset + 3] = 0x00; // number of sps ext\n      offset += 4;\n    }\n  }\n\n  public getData() {\n    return this.data;\n  }\n}\n\nexport function annexb2avcc(data: Buffer) {\n  const annexb_parser = new H264AnnexBParser(data);\n  let nalu_payload: H264NaluPayload | null = null;\n  const video_init_segment_dispatched_ = false;\n  const video_metadata_changed_ = false;\n\n  const video_metadata_: {\n    sps: H264NaluAVC1 | undefined;\n    pps: H264NaluAVC1 | undefined;\n    details: any;\n  } = {\n    sps: undefined,\n    pps: undefined,\n    details: undefined,\n  };\n\n  while ((nalu_payload = annexb_parser.readNextNaluPayload()) != null) {\n    const nalu_avc1 = new H264NaluAVC1(nalu_payload);\n\n    if (nalu_avc1.type === H264NaluType.kSliceSPS) {\n      // Notice: parseSPS requires Nalu without startcode or length-header\n      const details = SPSParser.parseSPS(nalu_payload.data);\n      if (!video_init_segment_dispatched_) {\n        video_metadata_.sps = nalu_avc1;\n        video_metadata_.details = details;\n      }\n    } else if (nalu_avc1.type === H264NaluType.kSlicePPS) {\n      if (!video_init_segment_dispatched_ || video_metadata_changed_) {\n        video_metadata_.pps = nalu_avc1;\n      }\n    }\n  }\n\n  const sps_without_header = video_metadata_.sps!.data.subarray(4);\n  const pps_without_header = video_metadata_.pps!.data.subarray(4);\n  const details = video_metadata_.details;\n  const avcc = new AVCDecoderConfigurationRecord(\n    sps_without_header,\n    pps_without_header,\n    details,\n  );\n  return avcc.getData();\n}\n"]}