{"version":3,"file":"sps-parser.js","sourceRoot":"","sources":["../../../../../../src/extra/container/mp4/sps-parser.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpGolomb from \"./exp-golomb\";\n\nclass SPSParser {\n  static _ebsp2rbsp(uint8array) {\n    const src = uint8array;\n    const src_length = src.byteLength;\n    const dst = new Uint8Array(src_length);\n    let dst_idx = 0;\n\n    for (let i = 0; i < src_length; i++) {\n      if (i >= 2) {\n        // Unescape: Skip 0x03 after 00 00\n        if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n          continue;\n        }\n      }\n      dst[dst_idx] = src[i];\n      dst_idx++;\n    }\n\n    return new Uint8Array(dst.buffer, 0, dst_idx);\n  }\n\n  static parseSPS(uint8array) {\n    const codec_array = uint8array.subarray(1, 4);\n    let codec_mimetype = \"avc1.\";\n    for (let j = 0; j < 3; j++) {\n      let h = codec_array[j].toString(16);\n      if (h.length < 2) {\n        h = \"0\" + h;\n      }\n      codec_mimetype += h;\n    }\n\n    const rbsp = SPSParser._ebsp2rbsp(uint8array);\n    let gb = new ExpGolomb(rbsp);\n\n    gb.readByte();\n    const profile_idc = gb.readByte(); // profile_idc\n    gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]\n    const level_idc = gb.readByte(); // level_idc\n    gb.readUEG(); // seq_parameter_set_id\n\n    const profile_string = SPSParser.getProfileString(profile_idc);\n    const level_string = SPSParser.getLevelString(level_idc);\n    let chroma_format_idc = 1;\n    let chroma_format = 420;\n    const chroma_format_table = [0, 420, 422, 444];\n    let bit_depth_luma = 8;\n    let bit_depth_chroma = 8;\n\n    if (\n      profile_idc === 100 ||\n      profile_idc === 110 ||\n      profile_idc === 122 ||\n      profile_idc === 244 ||\n      profile_idc === 44 ||\n      profile_idc === 83 ||\n      profile_idc === 86 ||\n      profile_idc === 118 ||\n      profile_idc === 128 ||\n      profile_idc === 138 ||\n      profile_idc === 144\n    ) {\n      chroma_format_idc = gb.readUEG();\n      if (chroma_format_idc === 3) {\n        gb.readBits(1); // separate_colour_plane_flag\n      }\n      if (chroma_format_idc <= 3) {\n        chroma_format = chroma_format_table[chroma_format_idc];\n      }\n\n      bit_depth_luma = gb.readUEG() + 8; // bit_depth_luma_minus8\n      bit_depth_chroma = gb.readUEG() + 8; // bit_depth_chroma_minus8\n      gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (gb.readBool()) {\n        // seq_scaling_matrix_present_flag\n        const scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;\n        for (let i = 0; i < scaling_list_count; i++) {\n          if (gb.readBool()) {\n            // seq_scaling_list_present_flag\n            if (i < 6) {\n              SPSParser._skipScalingList(gb, 16);\n            } else {\n              SPSParser._skipScalingList(gb, 64);\n            }\n          }\n        }\n      }\n    }\n    gb.readUEG(); // log2_max_frame_num_minus4\n    const pic_order_cnt_type = gb.readUEG();\n    if (pic_order_cnt_type === 0) {\n      gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n    } else if (pic_order_cnt_type === 1) {\n      gb.readBits(1); // delta_pic_order_always_zero_flag\n      gb.readSEG(); // offset_for_non_ref_pic\n      gb.readSEG(); // offset_for_top_to_bottom_field\n      const num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n      for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n        gb.readSEG(); // offset_for_ref_frame\n      }\n    }\n    const ref_frames = gb.readUEG(); // max_num_ref_frames\n    gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    const pic_width_in_mbs_minus1 = gb.readUEG();\n    const pic_height_in_map_units_minus1 = gb.readUEG();\n\n    const frame_mbs_only_flag = gb.readBits(1);\n    if (frame_mbs_only_flag === 0) {\n      gb.readBits(1); // mb_adaptive_frame_field_flag\n    }\n    gb.readBits(1); // direct_8x8_inference_flag\n\n    let frame_crop_left_offset = 0;\n    let frame_crop_right_offset = 0;\n    let frame_crop_top_offset = 0;\n    let frame_crop_bottom_offset = 0;\n\n    const frame_cropping_flag = gb.readBool();\n    if (frame_cropping_flag) {\n      frame_crop_left_offset = gb.readUEG();\n      frame_crop_right_offset = gb.readUEG();\n      frame_crop_top_offset = gb.readUEG();\n      frame_crop_bottom_offset = gb.readUEG();\n    }\n\n    let sar_width = 1,\n      sar_height = 1;\n    let fps = 0,\n      fps_fixed = true,\n      fps_num = 0,\n      fps_den = 0;\n\n    const vui_parameters_present_flag = gb.readBool();\n    if (vui_parameters_present_flag) {\n      if (gb.readBool()) {\n        // aspect_ratio_info_present_flag\n        const aspect_ratio_idc = gb.readByte();\n        const sar_w_table = [\n          1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2,\n        ];\n        const sar_h_table = [\n          1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1,\n        ];\n\n        if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n          sar_width = sar_w_table[aspect_ratio_idc - 1];\n          sar_height = sar_h_table[aspect_ratio_idc - 1];\n        } else if (aspect_ratio_idc === 255) {\n          sar_width = (gb.readByte() << 8) | gb.readByte();\n          sar_height = (gb.readByte() << 8) | gb.readByte();\n        }\n      }\n\n      if (gb.readBool()) {\n        // overscan_info_present_flag\n        gb.readBool(); // overscan_appropriate_flag\n      }\n      if (gb.readBool()) {\n        // video_signal_type_present_flag\n        gb.readBits(4); // video_format & video_full_range_flag\n        if (gb.readBool()) {\n          // colour_description_present_flag\n          gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n        }\n      }\n      if (gb.readBool()) {\n        // chroma_loc_info_present_flag\n        gb.readUEG(); // chroma_sample_loc_type_top_field\n        gb.readUEG(); // chroma_sample_loc_type_bottom_field\n      }\n      if (gb.readBool()) {\n        // timing_info_present_flag\n        const num_units_in_tick = gb.readBits(32);\n        const time_scale = gb.readBits(32);\n        fps_fixed = gb.readBool(); // fixed_frame_rate_flag\n\n        fps_num = time_scale;\n        fps_den = num_units_in_tick * 2;\n        fps = fps_num / fps_den;\n      }\n    }\n\n    let sarScale = 1;\n    if (sar_width !== 1 || sar_height !== 1) {\n      sarScale = sar_width / sar_height;\n    }\n\n    let crop_unit_x = 0,\n      crop_unit_y = 0;\n    if (chroma_format_idc === 0) {\n      crop_unit_x = 1;\n      crop_unit_y = 2 - frame_mbs_only_flag;\n    } else {\n      const sub_wc = chroma_format_idc === 3 ? 1 : 2;\n      const sub_hc = chroma_format_idc === 1 ? 2 : 1;\n      crop_unit_x = sub_wc;\n      crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n    }\n\n    let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n    let codec_height =\n      (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n    codec_width -=\n      (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n    codec_height -=\n      (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n    const present_width = Math.ceil(codec_width * sarScale);\n\n    gb.destroy();\n    gb = null as any;\n\n    return {\n      codec_mimetype,\n      profile_idc,\n      level_idc,\n      profile_string, // baseline, high, high10, ...\n      level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n      chroma_format_idc,\n      bit_depth: bit_depth_luma, // 8bit, 10bit, ...\n      bit_depth_luma,\n      bit_depth_chroma,\n      ref_frames,\n      chroma_format, // 4:2:0, 4:2:2, ...\n      chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n      frame_rate: {\n        fixed: fps_fixed,\n        fps: fps,\n        fps_den: fps_den,\n        fps_num: fps_num,\n      },\n\n      sar_ratio: {\n        width: sar_width,\n        height: sar_height,\n      },\n\n      codec_size: {\n        width: codec_width,\n        height: codec_height,\n      },\n\n      present_size: {\n        width: present_width,\n        height: codec_height,\n      },\n    };\n  }\n\n  static _skipScalingList(gb, count) {\n    let last_scale = 8,\n      next_scale = 8;\n    let delta_scale = 0;\n    for (let i = 0; i < count; i++) {\n      if (next_scale !== 0) {\n        delta_scale = gb.readSEG();\n        next_scale = (last_scale + delta_scale + 256) % 256;\n      }\n      last_scale = next_scale === 0 ? last_scale : next_scale;\n    }\n  }\n\n  static getProfileString(profile_idc) {\n    switch (profile_idc) {\n      case 66:\n        return \"Baseline\";\n      case 77:\n        return \"Main\";\n      case 88:\n        return \"Extended\";\n      case 100:\n        return \"High\";\n      case 110:\n        return \"High10\";\n      case 122:\n        return \"High422\";\n      case 244:\n        return \"High444\";\n      default:\n        return \"Unknown\";\n    }\n  }\n\n  static getLevelString(level_idc) {\n    return (level_idc / 10).toFixed(1);\n  }\n\n  static getChromaFormatString(chroma) {\n    switch (chroma) {\n      case 420:\n        return \"4:2:0\";\n      case 422:\n        return \"4:2:2\";\n      case 444:\n        return \"4:4:4\";\n      default:\n        return \"Unknown\";\n    }\n  }\n}\n\nexport default SPSParser;\n"]}