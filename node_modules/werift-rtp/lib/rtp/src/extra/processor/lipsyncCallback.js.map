{"version":3,"file":"lipsyncCallback.js","sourceRoot":"","sources":["../../../../../src/extra/processor/lipsyncCallback.ts"],"names":[],"mappings":";;;AAAA,uCAKmB;AAEnB,MAAa,eAAgB,SAAQ,qBAAW;IAK9C,YAAY,UAAmC,EAAE;QAC/C,KAAK,CACH,CAAC,MAAM,EAAE,EAAE;YACT,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvB,CAAC;QACH,CAAC,EACD,CAAC,MAAM,EAAE,EAAE;YACT,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvB,CAAC;QACH,CAAC,EACD,OAAO,CACR,CAAC;QAjBI;;;;;WAAyC;QACzC;;;;;WAA6B;QAC7B;;;;;WAAyC;QACzC;;;;;WAA6B;QAiBrC;;;;mBAAY,CAAC,EAAkC,EAAE,UAAuB,EAAE,EAAE;gBAC1E,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBAClB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;YACpC,CAAC;WAAC;QACF;;;;mBAAY,CAAC,EAAkC,EAAE,UAAuB,EAAE,EAAE;gBAC1E,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBAClB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;YACpC,CAAC;WAAC;QAEF;;;;mBAAa,CAAC,KAAmB,EAAE,EAAE;gBACnC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;WAAC;QACF;;;;mBAAa,CAAC,KAAmB,EAAE,EAAE;gBACnC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;WAAC;QAEF;;;;mBAAU,GAAG,EAAE;gBACb,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;oBACzB,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;gBACnC,CAAC;gBACD,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;oBACzB,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;gBACnC,CAAC;gBACD,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;gBACzB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YAC3B,CAAC;WAAC;IA7BF,CAAC;CA8BF;AAjDD,0CAiDC","sourcesContent":["import {\n  type LipSyncOptions,\n  LipsyncBase,\n  type LipsyncInput,\n  type LipsyncOutput,\n} from \"./lipsync\";\n\nexport class LipsyncCallback extends LipsyncBase {\n  private audioCb?: (input: LipsyncOutput) => void;\n  private audioDestructor?: () => void;\n  private videoCb?: (input: LipsyncOutput) => void;\n  private videoDestructor?: () => void;\n  constructor(options: Partial<LipSyncOptions> = {}) {\n    super(\n      (output) => {\n        if (this.audioCb) {\n          this.audioCb(output);\n        }\n      },\n      (output) => {\n        if (this.videoCb) {\n          this.videoCb(output);\n        }\n      },\n      options,\n    );\n  }\n\n  pipeAudio = (cb: (input: LipsyncOutput) => void, destructor?: () => void) => {\n    this.audioCb = cb;\n    this.audioDestructor = destructor;\n  };\n  pipeVideo = (cb: (input: LipsyncOutput) => void, destructor?: () => void) => {\n    this.videoCb = cb;\n    this.videoDestructor = destructor;\n  };\n\n  inputAudio = (input: LipsyncInput) => {\n    this.processAudioInput(input);\n  };\n  inputVideo = (input: LipsyncInput) => {\n    this.processVideoInput(input);\n  };\n\n  destroy = () => {\n    if (this.audioDestructor) {\n      this.audioDestructor();\n      this.audioDestructor = undefined;\n    }\n    if (this.videoDestructor) {\n      this.videoDestructor();\n      this.videoDestructor = undefined;\n    }\n    this.audioCb = undefined;\n    this.videoCb = undefined;\n  };\n}\n"]}