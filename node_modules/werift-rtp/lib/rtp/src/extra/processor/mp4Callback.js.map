{"version":3,"file":"mp4Callback.js","sourceRoot":"","sources":["../../../../../src/extra/processor/mp4Callback.ts"],"names":[],"mappings":";;;;AAAA,0CAAyC;AAEzC,6BAAqC;AACrC,+BAA2E;AAG3E,MAAa,WAAY,SAAQ,aAAO;IAGtC,YAAY,MAAe,EAAE,UAAsB,EAAE;QACnD,KAAK,CACH,MAAM,EACN,KAAK,EAAE,MAAM,EAAE,EAAE;YACf,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACnB,IAAI,EAAE,EAAE,CAAC;gBACP,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC,EACD,OAAO,CACR,CAAC;QAZI;;;;;WAAyC;QACzC;;;;mBAAQ,IAAI,gBAAY,EAAE;WAAC;QAcnC;;;;mBAAO,CAAC,EAAuC,EAAE,EAAE;gBACjD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;gBACb,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC;WAAC;QAEF;;;;mBAAa,CAAC,KAAe,EAAE,EAAE;gBAC/B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;WAAC;QACF;;;;mBAAa,CAAC,KAAe,EAAE,EAAE;gBAC/B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;WAAC;QAEF;;;;mBAAU,GAAG,EAAE;gBACb,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACtB,CAAC;WAAC;IAjBF,CAAC;;AAdH,kCA4CC;;AAXQ;;;;WAAmB,CAAC,IAAY,EAAE,EAAE;QACzC,MAAM,KAAK,GAAG,IAAI,gBAAY,EAAE,CAAC;QACjC,OAAO,KAAK,EAAE,KAAgB,EAAE,EAAE;YAChC,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;gBAC1B,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;oBACf,MAAM,IAAA,qBAAU,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC;qBAAM,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;gBACvB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;EAVsB,CAUrB","sourcesContent":["import { appendFile } from \"fs/promises\";\n\nimport { PromiseQueue } from \"../..\";\nimport { MP4Base, type Mp4Input, type Mp4Output, type Track } from \"./mp4\";\nimport type { WebmOption } from \"./webm\";\n\nexport class MP4Callback extends MP4Base {\n  private cb?: (input: Mp4Output) => Promise<void>;\n  private queue = new PromiseQueue();\n  constructor(tracks: Track[], options: WebmOption = {}) {\n    super(\n      tracks,\n      async (output) => {\n        const cb = this.cb;\n        if (cb) {\n          await this.queue.push(() => cb(output));\n        }\n      },\n      options,\n    );\n  }\n\n  pipe = (cb: (input: Mp4Output) => Promise<void>) => {\n    this.cb = cb;\n    this.start();\n  };\n\n  inputAudio = (input: Mp4Input) => {\n    this.processAudioInput(input);\n  };\n  inputVideo = (input: Mp4Input) => {\n    this.processVideoInput(input);\n  };\n\n  destroy = () => {\n    this.cb = undefined;\n    this.queue.cancel();\n  };\n\n  static saveToFileSystem = (path: string) => {\n    const queue = new PromiseQueue();\n    return async (value: Mp4Output) => {\n      await queue.push(async () => {\n        if (value.data) {\n          await appendFile(path, value.data);\n        } else if (value.eol) {\n        }\n      });\n    };\n  };\n}\n"]}