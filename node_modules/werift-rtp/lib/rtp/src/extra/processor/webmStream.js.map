{"version":3,"file":"webmStream.js","sourceRoot":"","sources":["../../../../../src/extra/processor/webmStream.ts"],"names":[],"mappings":";;;AAAA,oCAIoB;AAGpB,iCAKgB;AAMhB,MAAa,UAAW,SAAQ,eAAQ;IAMtC,YACE,MAOG,EACH,UAA4B,EAAE;QAE9B,KAAK,CACH,MAAM,EACN,CAAC,MAAM,EAAE,EAAE;YACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC,EACD,OAAO,CACR,CAAC;QAtBJ;;;;;WAAwC;QACxC;;;;;WAAwC;QACxC;;;;;WAA6C;QACrC;;;;;WAAwD;QAqB9D,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;QAC1D,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAc,CAAC;gBACpC,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE;oBACf,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAChC,CAAC;aACF,CAAC,CAAC;QACL,CAAC;QAED,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;QAC1D,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAc,CAAC;gBACpC,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE;oBACf,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAChC,CAAC;aACF,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,oBAAc,CAAmB;YACrD,KAAK,EAAE,CAAC,UAAU,EAAE,EAAE;gBACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC/B,CAAC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;CACF;AAnDD,gCAmDC","sourcesContent":["import {\n  ReadableStream,\n  type ReadableStreamController,\n  WritableStream,\n} from \"stream/web\";\n\nimport type { SupportedCodec } from \"../container/webm/container\";\nimport {\n  WebmBase,\n  type WebmInput,\n  type WebmOption,\n  type WebmOutput,\n} from \"./webm\";\n\nexport type WebmStreamOutput = WebmOutput;\n\nexport type WebmStreamOption = WebmOption;\n\nexport class WebmStream extends WebmBase {\n  audioStream!: WritableStream<WebmInput>;\n  videoStream!: WritableStream<WebmInput>;\n  webmStream: ReadableStream<WebmStreamOutput>;\n  private controller!: ReadableStreamController<WebmStreamOutput>;\n\n  constructor(\n    tracks: {\n      width?: number;\n      height?: number;\n      kind: \"audio\" | \"video\";\n      codec: SupportedCodec;\n      clockRate: number;\n      trackNumber: number;\n    }[],\n    options: WebmStreamOption = {},\n  ) {\n    super(\n      tracks,\n      (output) => {\n        this.controller.enqueue(output);\n      },\n      options,\n    );\n\n    const audioTrack = tracks.find((t) => t.kind === \"audio\");\n    if (audioTrack) {\n      this.audioStream = new WritableStream({\n        write: (input) => {\n          this.processAudioInput(input);\n        },\n      });\n    }\n\n    const videoTrack = tracks.find((t) => t.kind === \"video\");\n    if (videoTrack) {\n      this.videoStream = new WritableStream({\n        write: (input) => {\n          this.processVideoInput(input);\n        },\n      });\n    }\n\n    this.webmStream = new ReadableStream<WebmStreamOutput>({\n      start: (controller) => {\n        this.controller = controller;\n      },\n    });\n\n    this.start();\n  }\n}\n"]}