{"version":3,"file":"rtpCallback.js","sourceRoot":"","sources":["../../../../../src/extra/processor/rtpCallback.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event } from \"../../imports/common\";\n\nimport { RtpPacket } from \"../..\";\nimport type { SimpleProcessorCallback } from \"./interface\";\n\nexport type RtpInput = Buffer | RtpPacket;\n\nexport interface RtpOutput {\n  rtp?: RtpPacket;\n  eol?: boolean;\n}\n\nexport class RtpSourceCallback\n  implements SimpleProcessorCallback<RtpInput, RtpOutput>\n{\n  private cb?: (chunk: RtpOutput) => void;\n  private destructor?: () => void;\n  onStopped = new Event();\n  stats = {};\n  buffer: RtpPacket[] = [];\n  bufferFulfilled = false;\n\n  constructor(\n    private options: {\n      payloadType?: number;\n      clearInvalidPTPacket?: boolean;\n      initialBufferLength?: number;\n    } = {},\n  ) {\n    options.clearInvalidPTPacket = options.clearInvalidPTPacket ?? true;\n  }\n\n  toJSON() {\n    return { ...this.stats };\n  }\n\n  pipe(cb: (chunk: RtpOutput) => void, destructor?: () => void) {\n    this.cb = cb;\n    this.destructor = destructor;\n    return this;\n  }\n\n  input = (packet: Buffer | RtpPacket) => {\n    const rtp = Buffer.isBuffer(packet)\n      ? RtpPacket.deSerialize(packet)\n      : packet;\n\n    if (\n      this.options.payloadType != undefined &&\n      this.options.payloadType !== rtp.header.payloadType\n    ) {\n      if (this.options.clearInvalidPTPacket) {\n        rtp.clear();\n      }\n      return;\n    }\n\n    this.stats[\"rtpSource\"] =\n      new Date().toISOString() +\n      \" timestamp:\" +\n      rtp?.header.timestamp +\n      \" seq:\" +\n      rtp?.header.sequenceNumber;\n\n    const cb = this.cb;\n    if (cb) {\n      if (this.options.initialBufferLength) {\n        if (this.bufferFulfilled) {\n          cb({ rtp });\n          return;\n        }\n        this.buffer.push(rtp);\n        if (this.buffer.length > this.options.initialBufferLength) {\n          this.buffer.forEach((rtp) => {\n            cb({ rtp });\n          });\n          this.buffer = [];\n          this.bufferFulfilled = true;\n        }\n      } else {\n        cb({ rtp });\n      }\n    }\n  };\n\n  stop() {\n    if (this.cb) {\n      this.cb({ eol: true });\n    }\n    this.onStopped.execute();\n  }\n\n  destroy = () => {\n    if (this.destructor) {\n      this.destructor();\n      this.destructor = undefined;\n    }\n    this.cb = undefined;\n    this.onStopped.allUnsubscribe();\n  };\n}\n"]}