{"version":3,"file":"lipsync.js","sourceRoot":"","sources":["../../../../../src/extra/processor/lipsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomUUID } from \"crypto\";\n\nimport { int } from \"../..\";\nimport type { CodecFrame } from \"./depacketizer\";\nimport type { AVProcessor } from \"./interface\";\nimport type { MediaKind } from \"./webm\";\n\nexport type LipsyncInput = {\n  frame?: CodecFrame;\n  eol?: boolean;\n};\n\nexport type LipsyncOutput = {\n  frame?: CodecFrame;\n  eol?: boolean;\n};\n\nexport class LipsyncBase implements AVProcessor<LipsyncInput> {\n  private id = randomUUID();\n  bufferLength: number;\n  /**ms */\n  baseTime?: number;\n  audioBuffer: {\n    frame: CodecFrame;\n    kind: MediaKind;\n    [key: string]: any;\n  }[][];\n  videoBuffer: { frame: CodecFrame; kind: MediaKind }[][];\n  stopped = false;\n  /**ms */\n  private interval: number;\n  /**ms */\n  private bufferDuration: number;\n  private ptime: number;\n  private index = 0;\n  private currentTimestamp!: number;\n  /**ms */\n  private lastCommittedTime = 0;\n  private lastExecutionTime = 0;\n  private internalStats = {};\n  /**ms */\n  private lastFrameReceivedAt = 0;\n\n  constructor(\n    private audioOutput: (output: LipsyncOutput) => void,\n    private videoOutput: (output: LipsyncOutput) => void,\n    private options: Partial<LipSyncOptions> = {},\n  ) {\n    this.interval = this.options.syncInterval ?? 500;\n    this.bufferDuration = this.interval / 2;\n    this.bufferLength = (this.options.bufferLength ?? 10) * 2;\n    this.audioBuffer = [...new Array(this.bufferLength)].map(() => []);\n    this.videoBuffer = [...new Array(this.bufferLength)].map(() => []);\n    this.ptime = this.options.ptime ?? 20;\n  }\n\n  toJSON(): Record<string, any> {\n    return {\n      ...this.internalStats,\n      id: this.id,\n      audioBufferLength: this.audioBuffer.flat().length,\n      videoBufferLength: this.videoBuffer.flat().length,\n      baseTime: this.baseTime,\n      lastCommittedTimeSec: this.lastCommittedTime / 1000,\n    };\n  }\n\n  private executeTask() {\n    const audioBuffer = this.audioBuffer[this.index].sort(\n      (a, b) => a.frame.time - b.frame.time,\n    );\n\n    if (this.options.fillDummyAudioPacket) {\n      const last = audioBuffer.at(-1);\n      const expect = last\n        ? last.frame.time +\n          // offset\n          this.ptime\n        : this.currentTimestamp;\n\n      // パケット間の損失/muteはdtxプラグインでダミーパケットを挿入する\n      // interval中のパケットが途中から無いもしくはinterval中にパケットが無い場合はここでダミーパケットを挿入する\n      const audioDiff = this.currentTimestamp + this.bufferDuration - expect;\n      if (audioDiff > 0) {\n        for (\n          let time = expect;\n          time < this.currentTimestamp + this.bufferDuration;\n          time += this.ptime\n        ) {\n          audioBuffer.push({\n            frame: {\n              time,\n              data: this.options.fillDummyAudioPacket,\n              isKeyframe: true,\n            },\n            kind: \"audio\",\n          });\n          this.internalStats[\"pushDummyPacket\"] = {\n            count: (this.internalStats[\"pushDummyPacket\"]?.count ?? 0) + 1,\n            at: new Date().toISOString(),\n            time,\n          };\n        }\n      }\n    }\n    this.currentTimestamp += this.bufferDuration;\n    const joined = [...audioBuffer, ...this.videoBuffer[this.index]].filter(\n      (b) => b.frame.time >= this.lastCommittedTime,\n    );\n    const sorted = joined.sort((a, b) => a.frame.time - b.frame.time);\n    this.audioBuffer[this.index] = [];\n    this.videoBuffer[this.index] = [];\n\n    for (const output of sorted) {\n      if (output.kind === \"audio\") {\n        this.audioOutput(output);\n      } else {\n        this.videoOutput(output);\n      }\n      this.internalStats[\"lipsync\"] = new Date().toISOString();\n      this.lastCommittedTime = output.frame.time;\n    }\n\n    this.index++;\n    if (this.index === this.bufferLength) {\n      this.index = 0;\n    }\n  }\n\n  private stop() {\n    this.stopped = true;\n    this.audioBuffer = [];\n    this.videoBuffer = [];\n  }\n\n  processAudioInput = ({ frame, eol }: LipsyncInput) => {\n    if (!frame) {\n      this.audioOutput({ eol });\n      this.stop();\n      this.audioOutput = undefined as any;\n      return;\n    }\n\n    this.processInput(frame, this.audioBuffer, \"audio\");\n  };\n\n  processVideoInput = ({ frame, eol }: LipsyncInput) => {\n    if (!frame) {\n      this.videoOutput({ eol });\n      this.stop();\n      this.videoOutput = undefined as any;\n      return;\n    }\n\n    this.processInput(frame, this.videoBuffer, \"video\");\n  };\n\n  private processInput = (\n    frame: CodecFrame,\n    buffer: {\n      frame: CodecFrame;\n      kind: MediaKind;\n    }[][],\n    kind: MediaKind,\n  ) => {\n    if (this.stopped) {\n      return;\n    }\n\n    if (this.baseTime == undefined) {\n      this.baseTime = frame.time;\n      this.currentTimestamp = this.baseTime;\n      this.lastExecutionTime = this.baseTime;\n      this.lastCommittedTime = this.baseTime;\n      this.lastFrameReceivedAt = Date.now();\n    }\n\n    // 過去のフレームを捨てる\n    if (frame.time < this.lastCommittedTime) {\n      return;\n    }\n\n    // NTPの同期ずれが疑われるので捨てる\n    const now = Date.now();\n    const gap = 5000; // RTCP SR interval;\n    const lastCommittedElapsed = frame.time - this.lastCommittedTime;\n    const lastFrameReceivedElapsed = now - this.lastFrameReceivedAt;\n    if (gap < lastFrameReceivedElapsed && lastCommittedElapsed < gap) {\n      this.internalStats[\"invalidFrameTime\"] = {\n        count: (this.internalStats[\"invalidFrameTime\"]?.count ?? 0) + 1,\n        at: new Date().toISOString(),\n        lastCommittedElapsed,\n        lastFrameReceivedElapsed,\n      };\n      return;\n    }\n    this.lastFrameReceivedAt = now;\n\n    const elapsed = frame.time - this.baseTime;\n    const index = int(elapsed / this.bufferDuration) % this.bufferLength;\n    buffer[index].push({\n      frame,\n      kind,\n    });\n\n    const diff = frame.time - this.lastExecutionTime;\n    if (diff >= this.interval) {\n      const times = int(diff / this.bufferDuration) - 1;\n      this.lastExecutionTime = this.currentTimestamp;\n      for (let i = 0; i < times; i++) {\n        this.executeTask();\n        this.lastExecutionTime += this.bufferDuration;\n      }\n    }\n    return;\n  };\n}\n\nexport interface LipSyncOptions {\n  /**ms */\n  syncInterval: number;\n  /**\n   * int\n   * @description syncInterval * bufferLength = max packet lifetime\n   * */\n  bufferLength: number;\n  fillDummyAudioPacket: Buffer;\n  ptime: number;\n}\n"]}