{"version":3,"file":"rtpStream.js","sourceRoot":"","sources":["../../../../../src/extra/processor/rtpStream.ts"],"names":[],"mappings":";;;AAAA,oCAA2E;AAE3E,uCAA0C;AAG1C,MAAa,eAAe;IAK1B,YACU,UAGJ,EAAE;QAHN;;;;mBAAQ,OAAO;WAGT;QARR;;;;;WAAoC;QACpC;;;;;WAAmC;QACzB;;;;;WAAiD;QAkB3D;;;;mBAAO,CAAC,MAA0B,EAAE,EAAE;gBACpC,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;oBACjC,CAAC,CAAC,eAAS,CAAC,WAAW,CAAC,MAAM,CAAC;oBAC/B,CAAC,CAAC,MAAM,CAAC;gBAEX,IACE,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,SAAS;oBACrC,IAAI,CAAC,OAAO,CAAC,WAAW,KAAK,GAAG,CAAC,MAAM,CAAC,WAAW,EACnD,CAAC;oBACD,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC;wBACtC,GAAG,CAAC,KAAK,EAAE,CAAC;oBACd,CAAC;oBACD,OAAO;gBACT,CAAC;gBAED,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;YACtB,CAAC;WAAC;QA1BA,OAAO,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,IAAI,IAAI,CAAC;QAEpE,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAc,CAAC;YACjC,KAAK,EAAE,CAAC,UAAU,EAAE,EAAE;gBACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpD,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAoBD,IAAI;QACF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IACzC,CAAC;CACF;AA1CD,0CA0CC","sourcesContent":["import { ReadableStream, type ReadableStreamController } from \"stream/web\";\n\nimport { RtpPacket } from \"../../rtp/rtp\";\nimport type { RtpOutput } from \"./rtpCallback\";\n\nexport class RtpSourceStream {\n  readable: ReadableStream<RtpOutput>;\n  write!: (chunk: RtpOutput) => void;\n  protected controller!: ReadableStreamController<RtpOutput>;\n\n  constructor(\n    private options: {\n      payloadType?: number;\n      clearInvalidPTPacket?: boolean;\n    } = {},\n  ) {\n    options.clearInvalidPTPacket = options.clearInvalidPTPacket ?? true;\n\n    this.readable = new ReadableStream({\n      start: (controller) => {\n        this.controller = controller;\n        this.write = (chunk) => controller.enqueue(chunk);\n      },\n    });\n  }\n\n  push = (packet: Buffer | RtpPacket) => {\n    const rtp = Buffer.isBuffer(packet)\n      ? RtpPacket.deSerialize(packet)\n      : packet;\n\n    if (\n      this.options.payloadType != undefined &&\n      this.options.payloadType !== rtp.header.payloadType\n    ) {\n      if (this.options.clearInvalidPTPacket) {\n        rtp.clear();\n      }\n      return;\n    }\n\n    this.write({ rtp });\n  };\n\n  stop() {\n    this.controller.enqueue({ eol: true });\n  }\n}\n"]}