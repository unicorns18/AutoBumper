{"version":3,"file":"jitterBuffer.js","sourceRoot":"","sources":["../../../../../src/extra/processor/jitterBuffer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type RequireAtLeastOne,\n  type RtpPacket,\n  uint16Add,\n  uint16Gte,\n  uint32Add,\n  uint32Gt,\n} from \"../..\";\nimport type { Processor } from \"./interface\";\nimport type { RtpOutput } from \"./rtpCallback\";\n\nexport type JitterBufferInput = RtpOutput;\n\nexport interface JitterBufferOutput extends RtpOutput {\n  isPacketLost?: { from: number; to: number };\n}\n\nexport class JitterBufferBase\n  implements Processor<JitterBufferInput, JitterBufferOutput>\n{\n  private options: JitterBufferOptions;\n  /**uint16 */\n  private presentSeqNum?: number;\n  private rtpBuffer: { [sequenceNumber: number]: RtpPacket } = {};\n  private get expectNextSeqNum() {\n    return uint16Add(this.presentSeqNum!, 1);\n  }\n  private internalStats = {};\n\n  constructor(\n    public clockRate: number,\n    options: Partial<JitterBufferOptions> = {},\n  ) {\n    this.options = {\n      latency: options.latency ?? 200,\n      bufferSize: options.bufferSize ?? 10000,\n    };\n  }\n\n  toJSON() {\n    return {\n      ...this.internalStats,\n      rtpBufferLength: Object.values(this.rtpBuffer).length,\n      presentSeqNum: this.presentSeqNum,\n      expectNextSeqNum: this.expectNextSeqNum,\n    };\n  }\n\n  private stop() {\n    this.rtpBuffer = {};\n  }\n\n  processInput(input: JitterBufferInput): JitterBufferOutput[] {\n    const output: JitterBufferOutput[] = [];\n\n    if (!input.rtp) {\n      if (input.eol) {\n        const packets = this.sortAndClearBuffer(this.rtpBuffer);\n        for (const rtp of packets) {\n          output.push({ rtp });\n        }\n        output.push({ eol: true });\n\n        this.stop();\n      }\n      return output;\n    }\n\n    const { packets, timeoutSeqNum } = this.processRtp(input.rtp);\n\n    if (timeoutSeqNum != undefined) {\n      const isPacketLost = {\n        from: this.expectNextSeqNum,\n        to: timeoutSeqNum,\n      };\n      this.presentSeqNum = input.rtp.header.sequenceNumber;\n      output.push({ isPacketLost });\n      if (packets) {\n        for (const rtp of [...packets, input.rtp]) {\n          output.push({ rtp });\n        }\n      }\n      this.internalStats[\"jitterBuffer\"] = new Date().toISOString();\n      return output;\n    } else {\n      if (packets) {\n        for (const rtp of packets) {\n          output.push({ rtp });\n        }\n        this.internalStats[\"jitterBuffer\"] = new Date().toISOString();\n        return output;\n      }\n      return [];\n    }\n  }\n\n  private processRtp(rtp: RtpPacket): RequireAtLeastOne<{\n    packets: RtpPacket[];\n    timeoutSeqNum: number;\n    nothing: undefined;\n  }> {\n    const { sequenceNumber, timestamp } = rtp.header;\n\n    // init\n    if (this.presentSeqNum == undefined) {\n      this.presentSeqNum = sequenceNumber;\n      return { packets: [rtp] };\n    }\n\n    // duplicate\n    if (uint16Gte(this.presentSeqNum, sequenceNumber)) {\n      this.internalStats[\"duplicate\"] = {\n        count: (this.internalStats[\"duplicate\"]?.count ?? 0) + 1,\n        sequenceNumber,\n        timestamp: new Date().toISOString(),\n      };\n      return { nothing: undefined };\n    }\n\n    // expect\n    if (sequenceNumber === this.expectNextSeqNum) {\n      this.presentSeqNum = sequenceNumber;\n\n      const rtpBuffer = this.resolveBuffer(uint16Add(sequenceNumber, 1));\n      this.presentSeqNum =\n        rtpBuffer.at(-1)?.header.sequenceNumber ?? this.presentSeqNum;\n\n      this.disposeTimeoutPackets(timestamp);\n\n      return { packets: [rtp, ...rtpBuffer] };\n    }\n\n    this.pushRtpBuffer(rtp);\n\n    const { latestTimeoutSeqNum, sorted } =\n      this.disposeTimeoutPackets(timestamp);\n\n    if (latestTimeoutSeqNum) {\n      return { timeoutSeqNum: latestTimeoutSeqNum, packets: sorted };\n    } else {\n      return { nothing: undefined };\n    }\n  }\n\n  private pushRtpBuffer(rtp: RtpPacket) {\n    if (Object.values(this.rtpBuffer).length > this.options.bufferSize) {\n      this.internalStats[\"buffer_overflow\"] = {\n        count: (this.internalStats[\"buffer_overflow\"]?.count ?? 0) + 1,\n        timestamp: new Date().toISOString(),\n      };\n      return;\n    }\n\n    this.rtpBuffer[rtp.header.sequenceNumber] = rtp;\n  }\n\n  private resolveBuffer(seqNumFrom: number) {\n    const resolve: RtpPacket[] = [];\n\n    for (let index = seqNumFrom; ; index = uint16Add(index, 1)) {\n      const rtp = this.rtpBuffer[index];\n      if (rtp) {\n        resolve.push(rtp);\n        delete this.rtpBuffer[index];\n      } else {\n        break;\n      }\n    }\n\n    return resolve;\n  }\n\n  private sortAndClearBuffer(rtpBuffer: {\n    [sequenceNumber: number]: RtpPacket;\n  }) {\n    const buffer: RtpPacket[] = [];\n    for (let index = this.presentSeqNum ?? 0; ; index = uint16Add(index, 1)) {\n      const rtp = rtpBuffer[index];\n      if (rtp) {\n        buffer.push(rtp);\n        delete rtpBuffer[index];\n      }\n      if (Object.values(rtpBuffer).length === 0) {\n        break;\n      }\n    }\n    return buffer;\n  }\n\n  private disposeTimeoutPackets(baseTimestamp: number) {\n    let latestTimeoutSeqNum: number | undefined;\n\n    const packets = Object.values(this.rtpBuffer)\n      .map((rtp) => {\n        const { timestamp, sequenceNumber } = rtp.header;\n\n        if (uint32Gt(timestamp, baseTimestamp)) {\n          return;\n        }\n\n        const elapsedSec =\n          uint32Add(baseTimestamp, -timestamp) / this.clockRate;\n\n        if (elapsedSec * 1000 > this.options.latency) {\n          this.internalStats[\"timeout_packet\"] = {\n            count: (this.internalStats[\"timeout_packet\"]?.count ?? 0) + 1,\n            at: new Date().toISOString(),\n            sequenceNumber,\n            elapsedSec,\n            baseTimestamp,\n            timestamp,\n          };\n\n          if (latestTimeoutSeqNum == undefined) {\n            latestTimeoutSeqNum = sequenceNumber;\n          }\n          // 現在のSeqNumとの差が最も大きいSeqNumを探す\n          if (\n            uint16Add(sequenceNumber, -this.presentSeqNum!) >\n            uint16Add(latestTimeoutSeqNum, -this.presentSeqNum!)\n          ) {\n            latestTimeoutSeqNum = sequenceNumber;\n          }\n\n          const packet = this.rtpBuffer[sequenceNumber];\n          delete this.rtpBuffer[sequenceNumber];\n          return packet;\n        }\n      })\n      .flatMap((p): RtpPacket => p as RtpPacket)\n      .filter((p) => p);\n\n    const sorted = this.sortAndClearBuffer(\n      packets.reduce((acc, cur) => {\n        acc[cur.header.sequenceNumber] = cur;\n        return acc;\n      }, {}),\n    );\n\n    return { latestTimeoutSeqNum, sorted };\n  }\n}\n\nexport interface JitterBufferOptions {\n  /**milliseconds */\n  latency: number;\n  bufferSize: number;\n}\n"]}