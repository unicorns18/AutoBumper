{"version":3,"file":"nack.js","sourceRoot":"","sources":["../../../../../src/extra/processor/nack.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, debug } from \"../../imports/common\";\n\nimport {\n  GenericNack,\n  RtcpTransportLayerFeedback,\n  type RtpPacket,\n  timer,\n  uint16Add,\n} from \"../..\";\nimport type { Processor } from \"./interface\";\nimport type { RtpOutput } from \"./rtpCallback\";\n\nconst log = debug(\"werift-rtp : packages/rtp/src/processor/nack.ts\");\n\nconst LOST_SIZE = 30 * 5;\n\nexport type NackHandlerInput = RtpOutput;\n\nexport type NackHandlerOutput = RtpOutput;\n\nexport class NackHandlerBase\n  implements Processor<NackHandlerInput, NackHandlerOutput>\n{\n  private newEstSeqNum = 0;\n  private _lost: { [seqNum: number]: number } = {};\n  private clearNackInterval?: () => void;\n  private internalStats = {};\n\n  readonly onNackSent = new Event<[GenericNack]>();\n  readonly onPacketLost = new Event<[number]>();\n  mediaSourceSsrc?: number;\n  readonly retryCount = 10;\n  stopped = false;\n\n  constructor(\n    private senderSsrc: number,\n    private onNack: (rtcp: RtcpTransportLayerFeedback) => Promise<void>,\n  ) {}\n\n  toJSON(): Record<string, any> {\n    return {\n      ...this.internalStats,\n      newEstSeqNum: this.newEstSeqNum,\n      lostLength: Object.values(this._lost).length,\n      senderSsrc: this.senderSsrc,\n      mediaSourceSsrc: this.mediaSourceSsrc,\n    };\n  }\n\n  private get lostSeqNumbers() {\n    return Object.keys(this._lost).map(Number).sort();\n  }\n\n  private getLost(seq: number) {\n    return this._lost[seq];\n  }\n\n  private setLost(seq: number, count: number) {\n    this._lost[seq] = count;\n\n    if (this.clearNackInterval || this.stopped) {\n      return;\n    }\n    this.clearNackInterval = timer.setInterval(async () => {\n      try {\n        await this.sendNack();\n        if (!Object.keys(this._lost).length) {\n          this.clearNackInterval?.();\n          this.clearNackInterval = undefined;\n        }\n      } catch (error) {\n        log(\"failed to send nack\", error);\n      }\n    }, 5);\n  }\n\n  private removeLost(sequenceNumber: number) {\n    delete this._lost[sequenceNumber];\n  }\n\n  processInput = (input: RtpOutput) => {\n    if (input.rtp) {\n      this.addPacket(input.rtp);\n      this.internalStats[\"nackHandler\"] = new Date().toISOString();\n      return [input];\n    }\n\n    this.stop();\n    return [input];\n  };\n\n  private addPacket(packet: RtpPacket) {\n    const { sequenceNumber, ssrc } = packet.header;\n    this.mediaSourceSsrc = ssrc;\n\n    if (this.newEstSeqNum === 0) {\n      this.newEstSeqNum = sequenceNumber;\n      return;\n    }\n\n    if (this.getLost(sequenceNumber)) {\n      // log(\"packetLoss resolved\", { sequenceNumber });\n      this.removeLost(sequenceNumber);\n      return;\n    }\n\n    if (sequenceNumber === uint16Add(this.newEstSeqNum, 1)) {\n      this.newEstSeqNum = sequenceNumber;\n    } else if (sequenceNumber > uint16Add(this.newEstSeqNum, 1)) {\n      // packet lost detected\n      for (\n        let seq = uint16Add(this.newEstSeqNum, 1);\n        seq < sequenceNumber;\n        seq++\n      ) {\n        this.setLost(seq, 1);\n      }\n      // this.receiver.sendRtcpPLI(this.mediaSourceSsrc);\n\n      this.newEstSeqNum = sequenceNumber;\n      this.pruneLost();\n    }\n  }\n\n  private pruneLost() {\n    if (this.lostSeqNumbers.length > LOST_SIZE) {\n      this._lost = Object.entries(this._lost)\n        .slice(-LOST_SIZE)\n        .reduce(\n          (acc, [key, v]) => {\n            acc[key] = v;\n            return acc;\n          },\n          {} as { [seqNum: number]: number },\n        );\n    }\n  }\n\n  private stop() {\n    this.stopped = true;\n    this._lost = {};\n    this.clearNackInterval?.();\n    this.onNackSent.allUnsubscribe();\n    this.onPacketLost.allUnsubscribe();\n    this.onNack = undefined as any;\n  }\n\n  private updateRetryCount() {\n    this.lostSeqNumbers.forEach((seq) => {\n      const count = this._lost[seq]++;\n      if (count > this.retryCount) {\n        this.removeLost(seq);\n        this.onPacketLost.execute(seq);\n      }\n    });\n  }\n\n  private sendNack = () =>\n    new Promise((r, f) => {\n      if (this.lostSeqNumbers.length > 0 && this.mediaSourceSsrc) {\n        this.internalStats[\"count\"] = (this.internalStats[\"count\"] ?? 0) + 1;\n\n        const nack = new GenericNack({\n          senderSsrc: this.senderSsrc,\n          mediaSourceSsrc: this.mediaSourceSsrc,\n          lost: this.lostSeqNumbers,\n        });\n\n        const rtcp = new RtcpTransportLayerFeedback({\n          feedback: nack,\n        });\n        this.onNack(rtcp).then(r).catch(f);\n\n        this.updateRetryCount();\n        this.onNackSent.execute(nack);\n      }\n    });\n}\n"]}