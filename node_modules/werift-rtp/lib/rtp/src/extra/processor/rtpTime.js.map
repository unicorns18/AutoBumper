{"version":3,"file":"rtpTime.js","sourceRoot":"","sources":["../../../../../src/extra/processor/rtpTime.ts"],"names":[],"mappings":";;;AAAA,6BAA4C;AAE5C,iCAAmC;AAcnC,MAAa,WAAW;IAKtB,YAAmB,SAAiB;QAAxB;;;;mBAAO,SAAS;WAAQ;QAJpC;;;;;WAAuB;QACvB,QAAQ;QACR;;;;mBAAU,CAAC;WAAC;IAE2B,CAAC;IAExC,MAAM;QACJ,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,EAAE,GAAG,EAAE,GAAG,EAAgB;QACrC,IAAI,GAAG,EAAE,CAAC;YACR,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QACzB,CAAC;QAED,IAAI,GAAG,EAAE,CAAC;YACR,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAClD,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,SAAiB;QAC9B,IAAI,IAAI,CAAC,aAAa,IAAI,SAAS,EAAE,CAAC;YACpC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QACjC,CAAC;QAED,MAAM,MAAM,GACV,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,gBAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG,MAAM;YACpB,CAAC,CAAC,SAAS,GAAG,gBAAS,GAAG,IAAI,CAAC,aAAa;YAC5C,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;QACnC,IAAI,CAAC,OAAO,IAAI,IAAA,OAAG,EAAC,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;QAEvD,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAE/B,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAjDD,kCAiDC","sourcesContent":["import { type RtpPacket, int } from \"../..\";\nimport type { Processor } from \"./interface\";\nimport { Max32Uint } from \"./webm\";\n\nexport type RtpTimeInput = {\n  rtp?: RtpPacket;\n  eol?: boolean;\n};\n\nexport interface RtpTimeOutput {\n  rtp?: RtpPacket;\n  /**ms */\n  time?: number;\n  eol?: boolean;\n}\n\nexport class RtpTimeBase implements Processor<RtpTimeInput, RtpTimeOutput> {\n  baseTimestamp?: number;\n  /**ms */\n  elapsed = 0;\n\n  constructor(public clockRate: number) {}\n\n  toJSON(): Record<string, any> {\n    return {\n      baseTimestamp: this.baseTimestamp,\n      elapsed: this.elapsed,\n    };\n  }\n\n  processInput({ rtp, eol }: RtpTimeInput): RtpTimeOutput[] {\n    if (eol) {\n      return [{ eol: true }];\n    }\n\n    if (rtp) {\n      const elapsed = this.update(rtp.header.timestamp);\n      return [{ rtp, time: elapsed }];\n    }\n\n    return [];\n  }\n\n  /**\n   *\n   * @param timestamp\n   * @returns ms\n   */\n  private update(timestamp: number) {\n    if (this.baseTimestamp == undefined) {\n      this.baseTimestamp = timestamp;\n    }\n\n    const rotate =\n      Math.abs(timestamp - this.baseTimestamp) > (Max32Uint / 4) * 3;\n\n    const elapsed = rotate\n      ? timestamp + Max32Uint - this.baseTimestamp\n      : timestamp - this.baseTimestamp;\n    this.elapsed += int((elapsed / this.clockRate) * 1000);\n\n    this.baseTimestamp = timestamp;\n\n    return this.elapsed;\n  }\n}\n"]}