{"version":3,"file":"vp8.js","sourceRoot":"","sources":["../../../../src/codec/vp8.ts"],"names":[],"mappings":"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","sourcesContent":["import { getBit, paddingByte } from \"../../../common/src\";\nimport type { RtpHeader } from \"../rtp/rtp\";\nimport type { DePacketizerBase } from \"./base\";\n\n// RFC 7741 - RTP Payload Format for VP8 Video\n\n//        0 1 2 3 4 5 6 7                      0 1 2 3 4 5 6 7\n//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+\n//       |X|R|N|S|R| PID | (REQUIRED)        |X|R|N|S|R| PID | (REQUIRED)\n//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+\n//  X:   |I|L|T|K| RSV   | (OPTIONAL)   X:   |I|L|T|K| RSV   | (OPTIONAL)\n//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+\n//  I:   |M| PictureID   | (OPTIONAL)   I:   |M| PictureID   | (OPTIONAL)\n//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+\n//  L:   |   TL0PICIDX   | (OPTIONAL)        |   PictureID   |\n//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+\n//  T/K: |TID|Y| KEYIDX  | (OPTIONAL)   L:   |   TL0PICIDX   | (OPTIONAL)\n//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+\n//                                      T/K: |TID|Y| KEYIDX  | (OPTIONAL)\n//                                           +-+-+-+-+-+-+-+-+\n\n// 0 1 2 3 4 5 6 7\n// +-+-+-+-+-+-+-+-+\n// |Size0|H| VER |P|\n// +-+-+-+-+-+-+-+-+\n// |     Size1     |\n// +-+-+-+-+-+-+-+-+\n// |     Size2     |\n// +-+-+-+-+-+-+-+-+\n// | Octets 4..N of|\n// | VP8 payload   |\n// :               :\n// +-+-+-+-+-+-+-+-+\n// | OPTIONAL RTP  |\n// | padding       |\n// :               :\n// +-+-+-+-+-+-+-+-+\n\nexport class Vp8RtpPayload implements DePacketizerBase {\n  xBit!: number;\n  nBit!: number;\n  sBit!: number;\n  pid!: number;\n  iBit?: number;\n  lBit?: number;\n  tBit?: number;\n  kBit?: number;\n  mBit?: number;\n  pictureId?: number;\n  payload!: Buffer;\n  size0 = 0;\n  hBit?: number;\n  ver?: number;\n  pBit?: number;\n  size1 = 0;\n  size2 = 0;\n\n  static deSerialize(buf: Buffer) {\n    const p = new Vp8RtpPayload();\n\n    let offset = 0;\n\n    p.xBit = getBit(buf[offset], 0);\n    p.nBit = getBit(buf[offset], 2);\n    p.sBit = getBit(buf[offset], 3);\n    p.pid = getBit(buf[offset], 5, 3);\n    offset++;\n\n    if (p.xBit) {\n      p.iBit = getBit(buf[offset], 0);\n      p.lBit = getBit(buf[offset], 1);\n      p.tBit = getBit(buf[offset], 2);\n      p.kBit = getBit(buf[offset], 3);\n      offset++;\n    }\n\n    if (p.iBit) {\n      p.mBit = getBit(buf[offset], 0);\n      if (p.mBit) {\n        const _7 = paddingByte(getBit(buf[offset], 1, 7));\n        const _8 = paddingByte(buf[offset + 1]);\n        p.pictureId = Number.parseInt(_7 + _8, 2);\n        offset += 2;\n      } else {\n        p.pictureId = getBit(buf[offset], 1, 7);\n        offset++;\n      }\n    }\n\n    if (p.lBit) {\n      offset++;\n    }\n\n    if (p.lBit || p.kBit) {\n      if (p.tBit) {\n      }\n      if (p.kBit) {\n      }\n      offset++;\n    }\n\n    p.payload = buf.subarray(offset);\n\n    if (p.payloadHeaderExist) {\n      p.size0 = getBit(buf[offset], 0, 3);\n      p.hBit = getBit(buf[offset], 3);\n      p.ver = getBit(buf[offset], 4, 3);\n      p.pBit = getBit(buf[offset], 7);\n      offset++;\n      p.size1 = buf[offset];\n      offset++;\n      p.size2 = buf[offset];\n    }\n\n    return p;\n  }\n\n  static isDetectedFinalPacketInSequence(header: RtpHeader) {\n    return header.marker;\n  }\n\n  get isKeyframe() {\n    return this.pBit === 0;\n  }\n\n  get isPartitionHead() {\n    return this.sBit === 1;\n  }\n\n  get payloadHeaderExist() {\n    return this.sBit === 1 && this.pid === 0;\n  }\n\n  get size() {\n    if (this.payloadHeaderExist) {\n      const size = this.size0 + 8 * this.size1 + 2048 * this.size2;\n      return size;\n    }\n    return 0;\n  }\n}\n"]}