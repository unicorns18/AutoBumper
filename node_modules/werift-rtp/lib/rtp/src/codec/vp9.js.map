{"version":3,"file":"vp9.js","sourceRoot":"","sources":["../../../../src/codec/vp9.ts"],"names":[],"mappings":";AAAA,0HAA0H;;;AAE1H,6CAA0D;AAI1D,2BAA2B;AAC3B,4BAA4B;AAC5B,uCAAuC;AACvC,4BAA4B;AAC5B,uCAAuC;AACvC,4BAA4B;AAC5B,0CAA0C;AAC1C,4BAA4B;AAC5B,wDAAwD;AACxD,2DAA2D;AAC3D,wEAAwE;AACxE,2DAA2D;AAC3D,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAE5B,2BAA2B;AAC3B,4BAA4B;AAC5B,uCAAuC;AACvC,4BAA4B;AAC5B,0CAA0C;AAC1C,4BAA4B;AAC5B,0CAA0C;AAC1C,4BAA4B;AAC5B,wDAAwD;AACxD,4BAA4B;AAC5B,qDAAqD;AACrD,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAE5B,MAAa,aAAa;IAA1B;QACE,8BAA8B;QAC9B;;;;;WAAc;QACd,mCAAmC;QACnC;;;;;WAAc;QACd,2BAA2B;QAC3B;;;;;WAAc;QACd,mBAAmB;QACnB;;;;;WAAc;QACd,sBAAsB;QACtB;;;;;WAAc;QACd,oBAAoB;QACpB;;;;;WAAc;QACd,2BAA2B;QAC3B;;;;;WAAc;QACd;;;;;WAAc;QACd;;;;;WAAW;QACX;;;;;WAAmB;QACnB;;;;;WAAa;QACb;;;;;WAAW;QACX;;;;;WAAa;QACb,2BAA2B;QAC3B;;;;;WAAW;QACX;;;;;WAAmB;QACnB;;;;mBAAkB,EAAE;WAAC;QACrB;;;;;WAAa;QACb;;;;;WAAW;QACX;;;;;WAAW;QACX;;;;mBAAkB,EAAE;WAAC;QACrB;;;;mBAAmB,EAAE;WAAC;QACtB;;;;mBAAM,CAAC;WAAC;QACR;;;;mBAAgB,EAAE;WAAC;QACnB;;;;mBAAgB,EAAE;WAAC;QACnB;;;;mBAAuB,EAAE;WAAC;QAC1B;;;;;WAAiB;IAgInB,CAAC;IA9HC,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjC,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,GAAW;QAChC,MAAM,CAAC,GAAG,IAAI,aAAa,EAAE,CAAC;QAC9B,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,sBAAsB;QACvD,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,2BAA2B;QAC5D,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,yBAAyB;QAC1D,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,iBAAiB;QAClD,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,qBAAqB;QACtD,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB;QACpD,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,iCAAiC;QAClE,CAAC,CAAC,IAAI,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,sCAAsC;QACvE,MAAM,EAAE,CAAC;QAET,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;YACX,CAAC,CAAC,CAAC,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAE7B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;gBACR,MAAM,EAAE,GAAG,IAAA,iBAAW,EAAC,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClD,MAAM,EAAE,GAAG,IAAA,iBAAW,EAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxC,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC1C,MAAM,IAAI,CAAC,CAAC;YACd,CAAC;iBAAM,CAAC;gBACN,CAAC,CAAC,SAAS,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxC,MAAM,EAAE,CAAC;YACX,CAAC;QACH,CAAC;QAED,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;YACX,CAAC,CAAC,GAAG,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC,CAAC,GAAG,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,MAAM,EAAE,CAAC;YACT,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;gBACjB,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC1B,MAAM,EAAE,CAAC;YACX,CAAC;QACH,CAAC;QAED,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;YACrB,SAAS,CAAC;gBACR,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClD,MAAM,CAAC,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjC,MAAM,EAAE,CAAC;gBACT,IAAI,CAAC,KAAK,CAAC;oBAAE,MAAM;YACrB,CAAC;QACH,CAAC;QAED,8BAA8B;QAC9B,EAAE;QACF,yBAAyB;QACzB,yBAAyB;QACzB,yCAAyC;QACzC,yCAAyC;QACzC,yCAAyC;QACzC,yCAAyC;QACzC,uDAAuD;QACvD,yCAAyC;QACzC,yCAAyC;QACzC,yCAAyC;QACzC,yCAAyC;QACzC,oCAAoC;QACpC,sDAAsD;QACtD,sDAAsD;QACtD,gEAAgE;QAChE,sDAAsD;QACtD,sDAAsD;QACtD,EAAE;QACF,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;YACX,CAAC,CAAC,GAAG,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,MAAM,EAAE,CAAC;YAET,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;gBACR,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;oBACjC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;oBACvC,MAAM,IAAI,CAAC,CAAC;oBACZ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;oBACxC,MAAM,IAAI,CAAC,CAAC;gBACd,CAAC,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;gBACR,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpB,MAAM,EAAE,CAAC;YACX,CAAC;YAED,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC;gBACd,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;oBACrC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACtC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACnC,MAAM,CAAC,GAAG,IAAA,YAAM,EAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACpC,MAAM,EAAE,CAAC;oBAET,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;oBACnB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;wBACV,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;4BACzB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;4BAChC,MAAM,EAAE,CAAC;wBACX,CAAC,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QACD,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,+BAA+B,CAAC,MAAiB;QACtD,OAAO,MAAM,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAClE,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;CACF;AAlKD,sCAkKC","sourcesContent":["// RTP Payload Format for VP9 Video draft-ietf-payload-vp9-16 https://datatracker.ietf.org/doc/html/draft-ietf-payload-vp9\n\nimport { getBit, paddingByte } from \"../../../common/src\";\nimport type { RtpHeader } from \"../rtp/rtp\";\nimport type { DePacketizerBase } from \"./base\";\n\n//          0 1 2 3 4 5 6 7\n//         +-+-+-+-+-+-+-+-+\n//         |I|P|L|F|B|E|V|Z| (REQUIRED)\n//         +-+-+-+-+-+-+-+-+\n//    I:   |M| PICTURE ID  | (REQUIRED)\n//         +-+-+-+-+-+-+-+-+\n//    M:   | EXTENDED PID  | (RECOMMENDED)\n//         +-+-+-+-+-+-+-+-+\n//    L:   | TID |U| SID |D| (Conditionally RECOMMENDED)\n//         +-+-+-+-+-+-+-+-+                             -\\\n//    P,F: | P_DIFF      |N| (Conditionally REQUIRED)    - up to 3 times\n//         +-+-+-+-+-+-+-+-+                             -/\n//    V:   | SS            |\n//         | ..            |\n//         +-+-+-+-+-+-+-+-+\n\n//          0 1 2 3 4 5 6 7\n//         +-+-+-+-+-+-+-+-+\n//         |I|P|L|F|B|E|V|Z| (REQUIRED)\n//         +-+-+-+-+-+-+-+-+\n//    I:   |M| PICTURE ID  | (RECOMMENDED)\n//         +-+-+-+-+-+-+-+-+\n//    M:   | EXTENDED PID  | (RECOMMENDED)\n//         +-+-+-+-+-+-+-+-+\n//    L:   | TID |U| SID |D| (Conditionally RECOMMENDED)\n//         +-+-+-+-+-+-+-+-+\n//         |   TL0PICIDX   | (Conditionally REQUIRED)\n//         +-+-+-+-+-+-+-+-+\n//    V:   | SS            |\n//         | ..            |\n//         +-+-+-+-+-+-+-+-+\n\nexport class Vp9RtpPayload implements DePacketizerBase {\n  /**Picture ID (PID) present */\n  iBit!: number;\n  /**Inter-picture predicted frame */\n  pBit!: number;\n  /**Layer indices present */\n  lBit!: number;\n  /**Flexible mode */\n  fBit!: number;\n  /**Start of a frame */\n  bBit!: number;\n  /**End of a frame */\n  eBit!: number;\n  /**Scalability structure */\n  vBit!: number;\n  zBit!: number;\n  m?: number;\n  pictureId?: number;\n  tid?: number;\n  u?: number;\n  sid?: number;\n  /**inter_layer_predicted */\n  d?: number;\n  tl0PicIdx?: number;\n  pDiff: number[] = [];\n  n_s?: number;\n  y?: number;\n  g?: number;\n  width: number[] = [];\n  height: number[] = [];\n  n_g = 0;\n  pgT: number[] = [];\n  pgU: number[] = [];\n  pgP_Diff: number[][] = [];\n  payload!: Buffer;\n\n  static deSerialize(buf: Buffer) {\n    const { p, offset } = this.parseRtpPayload(buf);\n    p.payload = buf.subarray(offset);\n    return p;\n  }\n\n  static parseRtpPayload(buf: Buffer) {\n    const p = new Vp9RtpPayload();\n    let offset = 0;\n\n    p.iBit = getBit(buf[offset], 0); // PictureId present .\n    p.pBit = getBit(buf[offset], 1); // Inter-picture predicted.\n    p.lBit = getBit(buf[offset], 2); // Layer indices present.\n    p.fBit = getBit(buf[offset], 3); // Flexible mode.\n    p.bBit = getBit(buf[offset], 4); // Begins frame flag.\n    p.eBit = getBit(buf[offset], 5); // Ends frame flag.\n    p.vBit = getBit(buf[offset], 6); // Scalability structure present.\n    p.zBit = getBit(buf[offset], 7); // Not used for inter-layer prediction\n    offset++;\n\n    if (p.iBit) {\n      p.m = getBit(buf[offset], 0);\n\n      if (p.m) {\n        const _7 = paddingByte(getBit(buf[offset], 1, 7));\n        const _8 = paddingByte(buf[offset + 1]);\n        p.pictureId = Number.parseInt(_7 + _8, 2);\n        offset += 2;\n      } else {\n        p.pictureId = getBit(buf[offset], 1, 7);\n        offset++;\n      }\n    }\n\n    if (p.lBit) {\n      p.tid = getBit(buf[offset], 0, 3);\n      p.u = getBit(buf[offset], 3);\n      p.sid = getBit(buf[offset], 4, 3);\n      p.d = getBit(buf[offset], 7);\n      offset++;\n      if (p.fBit === 0) {\n        p.tl0PicIdx = buf[offset];\n        offset++;\n      }\n    }\n\n    if (p.fBit && p.pBit) {\n      for (;;) {\n        p.pDiff = [...p.pDiff, getBit(buf[offset], 0, 7)];\n        const n = getBit(buf[offset], 7);\n        offset++;\n        if (n === 0) break;\n      }\n    }\n\n    // Scalability structure (SS):\n    //\n    //      +-+-+-+-+-+-+-+-+\n    // V:   | N_S |Y|G|-|-|-|\n    //      +-+-+-+-+-+-+-+-+              -|\n    // Y:   |     WIDTH     | (OPTIONAL)    .\n    //      +               +               .\n    //      |               | (OPTIONAL)    .\n    //      +-+-+-+-+-+-+-+-+               . N_S + 1 times\n    //      |     HEIGHT    | (OPTIONAL)    .\n    //      +               +               .\n    //      |               | (OPTIONAL)    .\n    //      +-+-+-+-+-+-+-+-+              -|\n    // G:   |      N_G      | (OPTIONAL)\n    //      +-+-+-+-+-+-+-+-+                           -|\n    // N_G: |  T  |U| R |-|-| (OPTIONAL)                 .\n    //      +-+-+-+-+-+-+-+-+              -|            . N_G times\n    //      |    P_DIFF     | (OPTIONAL)    . R times    .\n    //      +-+-+-+-+-+-+-+-+              -|           -|\n    //\n    if (p.vBit) {\n      p.n_s = getBit(buf[offset], 0, 3);\n      p.y = getBit(buf[offset], 3);\n      p.g = getBit(buf[offset], 4);\n      offset++;\n\n      if (p.y) {\n        [...Array(p.n_s + 1)].forEach(() => {\n          p.width.push(buf.readUInt16BE(offset));\n          offset += 2;\n          p.height.push(buf.readUInt16BE(offset));\n          offset += 2;\n        });\n      }\n\n      if (p.g) {\n        p.n_g = buf[offset];\n        offset++;\n      }\n\n      if (p.n_g > 0) {\n        [...Array(p.n_g).keys()].forEach((i) => {\n          p.pgT.push(getBit(buf[offset], 0, 3));\n          p.pgU.push(getBit(buf[offset], 3));\n          const r = getBit(buf[offset], 4, 2);\n          offset++;\n\n          p.pgP_Diff[i] = [];\n          if (r > 0) {\n            [...Array(r)].forEach(() => {\n              p.pgP_Diff[i].push(buf[offset]);\n              offset++;\n            });\n          }\n        });\n      }\n    }\n    return { offset, p };\n  }\n\n  static isDetectedFinalPacketInSequence(header: RtpHeader) {\n    return header.marker;\n  }\n\n  get isKeyframe() {\n    return !!(!this.pBit && this.bBit && (!this.sid || !this.lBit));\n  }\n\n  get isPartitionHead() {\n    return this.bBit && (!this.lBit || !this.d);\n  }\n}\n"]}