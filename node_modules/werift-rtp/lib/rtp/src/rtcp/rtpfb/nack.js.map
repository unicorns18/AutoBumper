{"version":3,"file":"nack.js","sourceRoot":"","sources":["../../../../../src/rtcp/rtpfb/nack.ts"],"names":[],"mappings":"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","sourcesContent":["import { RtcpTransportLayerFeedback } from \".\";\nimport { bufferReader, bufferWriter } from \"../../../../common/src\";\nimport { RtcpHeader } from \"../header\";\n\n// 0                   1                   2                   3\n// 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n// |            PID                |             BLP               |\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n// Packet ID (PID)\n// bitmask of following lost packets (BLP):\n\nexport class GenericNack {\n  static count = 1;\n  readonly count = GenericNack.count;\n  header!: RtcpHeader;\n  senderSsrc!: number;\n  mediaSourceSsrc!: number;\n  lost: number[] = [];\n\n  toJSON() {\n    return {\n      lost: this.lost,\n      senderSsrc: this.senderSsrc,\n      mediaSourceSsrc: this.mediaSourceSsrc,\n    };\n  }\n\n  constructor(props: Partial<GenericNack> = {}) {\n    Object.assign(this, props);\n    if (!this.header) {\n      this.header = new RtcpHeader({\n        type: RtcpTransportLayerFeedback.type,\n        count: this.count,\n        version: 2,\n      });\n    }\n  }\n\n  static deSerialize(data: Buffer, header: RtcpHeader) {\n    const [senderSsrc, mediaSourceSsrc] = bufferReader(data, [4, 4]);\n\n    const lost: number[] = [];\n    for (let pos = 8; pos < data.length; pos += 4) {\n      const [pid, blp] = bufferReader(data.subarray(pos), [2, 2]);\n      lost.push(pid);\n      for (let diff = 0; diff < 16; diff++) {\n        if ((blp >> diff) & 1) {\n          lost.push(pid + diff + 1);\n        }\n      }\n    }\n\n    return new GenericNack({\n      header,\n      senderSsrc,\n      mediaSourceSsrc,\n      lost,\n    });\n  }\n\n  serialize() {\n    const ssrcPair = bufferWriter(\n      [4, 4],\n      [this.senderSsrc, this.mediaSourceSsrc],\n    );\n\n    const fci: Buffer[] = [];\n    if (this.lost.length > 0) {\n      let headPid = this.lost[0],\n        blp = 0;\n      this.lost.slice(1).forEach((pid) => {\n        const diff = pid - headPid - 1;\n        if (diff >= 0 && diff < 16) {\n          blp |= 1 << diff;\n        } else {\n          fci.push(bufferWriter([2, 2], [headPid, blp]));\n          headPid = pid;\n          blp = 0;\n        }\n      });\n      fci.push(bufferWriter([2, 2], [headPid, blp]));\n    }\n    const buf = Buffer.concat([ssrcPair, Buffer.concat(fci)]);\n    this.header.length = buf.length / 4;\n    return Buffer.concat([this.header.serialize(), buf]);\n  }\n}\n"]}