{"version":3,"file":"header.js","sourceRoot":"","sources":["../../../../src/rtcp/header.ts"],"names":[],"mappings":";;;AAAA,6CAK6B;AAEhB,QAAA,gBAAgB,GAAG,CAAC,CAAC;AAElC;;;;;;GAMG;AAEH,MAAa,UAAU;IAQrB,YAAY,QAA6B,EAAE;QAP3C;;;;mBAAU,CAAC;WAAC;QACZ;;;;mBAAU,KAAK;WAAC;QAChB;;;;mBAAQ,CAAC;WAAC;QACV;;;;mBAAO,CAAC;WAAC;QACT,sDAAsD;QACtD;;;;mBAAS,CAAC;WAAC;QAGT,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,SAAS;QACP,MAAM,MAAM,GAAG,IAAI,eAAS,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,IAAI,CAAC,OAAO;YAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7B,MAAM,GAAG,GAAG,IAAA,kBAAY,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC5E,OAAO,GAAG,CAAC;IACb,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,GAAG,IAAA,kBAAY,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,OAAO,GAAG,IAAA,YAAM,EAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACrC,MAAM,OAAO,GAAG,IAAA,YAAM,EAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,IAAA,YAAM,EAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC,OAAO,IAAI,UAAU,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IACnE,CAAC;CACF;AA5BD,gCA4BC","sourcesContent":["import {\n  BitWriter,\n  bufferReader,\n  bufferWriter,\n  getBit,\n} from \"../../../common/src\";\n\nexport const RTCP_HEADER_SIZE = 4;\n\n/*\n *  0                   1                   2                   3\n *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |V=2|P|    RC   |      PT       |             length            |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\nexport class RtcpHeader {\n  version = 2;\n  padding = false;\n  count = 0;\n  type = 0;\n  /**このパケットの長さは、ヘッダーと任意のパディングを含む32ビットワードから 1を引いたものである */\n  length = 0;\n\n  constructor(props: Partial<RtcpHeader> = {}) {\n    Object.assign(this, props);\n  }\n\n  serialize() {\n    const v_p_rc = new BitWriter(8);\n    v_p_rc.set(2, 0, this.version);\n    if (this.padding) v_p_rc.set(1, 2, 1);\n    v_p_rc.set(5, 3, this.count);\n    const buf = bufferWriter([1, 1, 2], [v_p_rc.value, this.type, this.length]);\n    return buf;\n  }\n\n  static deSerialize(buf: Buffer) {\n    const [v_p_rc, type, length] = bufferReader(buf, [1, 1, 2]);\n    const version = getBit(v_p_rc, 0, 2);\n    const padding = getBit(v_p_rc, 2, 1) > 0;\n    const count = getBit(v_p_rc, 3, 5);\n    return new RtcpHeader({ version, padding, count, type, length });\n  }\n}\n"]}