{"version":3,"file":"rtcp.js","sourceRoot":"","sources":["../../../../src/rtcp/rtcp.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from \"../imports/common\";\nimport { RTCP_HEADER_SIZE, RtcpHeader } from \"./header\";\nimport { RtcpPayloadSpecificFeedback } from \"./psfb\";\nimport { RtcpRrPacket } from \"./rr\";\nimport { RtcpTransportLayerFeedback } from \"./rtpfb\";\nimport { RtcpSourceDescriptionPacket } from \"./sdes\";\nimport { RtcpSrPacket } from \"./sr\";\n\nconst log = debug(\"werift-rtp:packages/rtp/src/rtcp/rtcp.ts\");\n\nexport type RtcpPacket =\n  | RtcpRrPacket\n  | RtcpSrPacket\n  | RtcpPayloadSpecificFeedback\n  | RtcpSourceDescriptionPacket\n  | RtcpTransportLayerFeedback;\n\nexport class RtcpPacketConverter {\n  static serialize(\n    type: number,\n    count: number,\n    payload: Buffer,\n    length: number,\n  ) {\n    const header = new RtcpHeader({\n      type,\n      count,\n      version: 2,\n      length,\n    });\n    const buf = header.serialize();\n    return Buffer.concat([buf, payload]);\n  }\n\n  static deSerialize(data: Buffer) {\n    let pos = 0;\n    const packets: RtcpPacket[] = [];\n\n    while (pos < data.length) {\n      const header = RtcpHeader.deSerialize(\n        data.subarray(pos, pos + RTCP_HEADER_SIZE),\n      );\n      pos += RTCP_HEADER_SIZE;\n\n      let payload = data.subarray(pos);\n      pos += header.length * 4;\n\n      if (header.padding) {\n        payload = payload.subarray(0, payload.length - payload.subarray(-1)[0]);\n      }\n\n      try {\n        switch (header.type) {\n          case RtcpSrPacket.type:\n            packets.push(RtcpSrPacket.deSerialize(payload, header.count));\n            break;\n          case RtcpRrPacket.type:\n            packets.push(RtcpRrPacket.deSerialize(payload, header.count));\n            break;\n          case RtcpSourceDescriptionPacket.type:\n            packets.push(\n              RtcpSourceDescriptionPacket.deSerialize(payload, header),\n            );\n            break;\n          case RtcpTransportLayerFeedback.type:\n            packets.push(\n              RtcpTransportLayerFeedback.deSerialize(payload, header),\n            );\n            break;\n          case RtcpPayloadSpecificFeedback.type:\n            packets.push(\n              RtcpPayloadSpecificFeedback.deSerialize(payload, header),\n            );\n            break;\n          default:\n            // log(\"unknown rtcp packet\", header.type);\n            break;\n        }\n      } catch (error) {\n        log(\"deSerialize RTCP\", error);\n      }\n    }\n\n    return packets;\n  }\n}\n\nexport function isRtcp(buf: Buffer) {\n  return buf.length >= 2 && buf[1] >= 192 && buf[1] <= 208;\n}\n"]}